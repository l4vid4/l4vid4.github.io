import{_ as e,c as l,a as t,o as i}from"./app-dsZ4C4U9.js";const n={};function o(r,a){return i(),l("div",null,a[0]||(a[0]=[t('<h2 id="日记" tabindex="-1"><a class="header-anchor" href="#日记"><span>日记</span></a></h2><h3 id="_2025-5-24" tabindex="-1"><a class="header-anchor" href="#_2025-5-24"><span>2025/5/24</span></a></h3><ul><li><p>搭建项目结构，包括kit-core，kit-starter，kit-generator，kit-example</p></li><li><p>实现kit-core核心功能，controller的响应暂时封装ResultResponse响应体</p></li><li><p>实现通用分页组件，包括通用分页请求体，通用分页响应体</p></li><li><p>下一步：抽离kit-core的响应体，将其放入kit-starter中自动装配；</p></li></ul><h3 id="_2025-5-25" tabindex="-1"><a class="header-anchor" href="#_2025-5-25"><span>2025/5/25</span></a></h3><ul><li>实现统一响应封装</li><li>实现统一异常管理</li><li>实现自动配置</li><li>优化分页组件，支持用户自定义entity → entityVO转换器</li></ul><h3 id="_2025-5-26" tabindex="-1"><a class="header-anchor" href="#_2025-5-26"><span>2025/5/26</span></a></h3><ul><li><p>开发动态代理自动注册API。</p></li><li><p>采用bytebuddy和cglib均遇到各种问题</p><blockquote><ol><li>动态代理注入缺少上下文信息，无法访问。通过设置options解决</li><li>CGLIB动态代理生成的子类无法保留方法参数的名字和注解信息。（切换成ByteBuddy）</li></ol></blockquote></li></ul><h2 id="遇到的问题" tabindex="-1"><a class="header-anchor" href="#遇到的问题"><span>遇到的问题</span></a></h2><h3 id="继承basecontroller就会自动暴露所有接口-用户可能并不想暴露所有接口。" tabindex="-1"><a class="header-anchor" href="#继承basecontroller就会自动暴露所有接口-用户可能并不想暴露所有接口。"><span>继承BaseController就会自动暴露所有接口，用户可能并不想暴露所有接口。</span></a></h3><ul><li>采用注解+反射机制，让用户自定义去排除不想暴露的接口。</li></ul><h3 id="依赖过于繁重" tabindex="-1"><a class="header-anchor" href="#依赖过于繁重"><span>依赖过于繁重</span></a></h3><ul><li>拆分依赖，kit-core仅依赖Spring framework，kit-starter依赖SpringBoot</li></ul><h3 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理"><span>动态代理</span></a></h3><h4 id="_1-spring-如何识别-controller-方法并注册" tabindex="-1"><a class="header-anchor" href="#_1-spring-如何识别-controller-方法并注册"><span>1. Spring 如何识别 Controller 方法并注册？</span></a></h4><ul><li><strong>问题</strong>：需要深入理解 Spring MVC 是如何从 <code>@RequestMapping</code> 注解扫描到 URL 的。</li><li><strong>解决</strong>：阅读源码，明确是通过 <code>RequestMappingHandlerMapping#detectHandlerMethods</code> 方法将带注解的方法注册到 HandlerMapping 中。动态注册时显式调用此方法即可。</li></ul><h4 id="_2-动态生成的-controller-无法识别泛型参数" tabindex="-1"><a class="header-anchor" href="#_2-动态生成的-controller-无法识别泛型参数"><span>2. 动态生成的 Controller 无法识别泛型参数</span></a></h4><ul><li><strong>问题</strong>：使用泛型 <code>T</code>、<code>ID</code> 时，ByteBuddy 生成的类并不能自动推导这些类型，导致在运行时无法访问实体类、无法序列化参数。</li><li><strong>解决</strong>： <ul><li>在注册阶段手动将 <code>entityClass</code> 注入到动态生成的 Controller 中。</li><li>修改 <code>BaseController</code>，新增 <code>setEntityClass(Class&lt;T&gt; entityClass)</code> 方法用于手动设置。</li></ul></li></ul><h4 id="_3-接口参数类型固定为-long-不够灵活" tabindex="-1"><a class="header-anchor" href="#_3-接口参数类型固定为-long-不够灵活"><span>3. 接口参数类型固定为 Long，不够灵活</span></a></h4><ul><li><strong>问题</strong>：<code>getById(Long id)</code> 固定为 <code>Long</code> 类型，不支持 <code>String/UUID/...</code> 等类型主键。</li><li><strong>解决</strong>： <ul><li>在 <code>@AutoApi</code> 中新增属性：<code>Class&lt;?&gt; idType() default Long.class;</code></li><li>修改 <code>BaseController</code> 为泛型 <code>ID extends Serializable</code>，并在 <code>getById(ID id)</code> 中使用泛型参数。</li></ul></li></ul><h3 id="apt" tabindex="-1"><a class="header-anchor" href="#apt"><span>APT</span></a></h3><h4 id="apt是编译期的注解处理器-无法读取在运行期才会读入的application-yml" tabindex="-1"><a class="header-anchor" href="#apt是编译期的注解处理器-无法读取在运行期才会读入的application-yml"><span>APT是编译期的注解处理器，无法读取在运行期才会读入的application.yml</span></a></h4><ul><li>所以采用直接在注解上标注每个实体要采用的模式。</li></ul><h4 id="apt是编译器的注解处理器-所以用户如果以组件的形式引入-无法触发编译-导致无法使用" tabindex="-1"><a class="header-anchor" href="#apt是编译器的注解处理器-所以用户如果以组件的形式引入-无法触发编译-导致无法使用"><span>APT是编译器的注解处理器，所以用户如果以组件的形式引入，无法触发编译，导致无法使用</span></a></h4><h4 id="apt出现各种编译报错问题-跟jdk版本关联过于密切-另外-apt方案可以改用直接让用户调用代码生成器即可生成-遂放弃apt方案。" tabindex="-1"><a class="header-anchor" href="#apt出现各种编译报错问题-跟jdk版本关联过于密切-另外-apt方案可以改用直接让用户调用代码生成器即可生成-遂放弃apt方案。"><span>APT出现各种编译报错问题，跟Jdk版本关联过于密切，另外，APT方案可以改用直接让用户调用代码生成器即可生成，遂放弃APT方案。</span></a></h4>',24)]))}const d=e(n,[["render",o]]),c=JSON.parse('{"path":"/studyNotes/rgul59iu/","title":"开发日记","lang":"zh-CN","frontmatter":{"title":"开发日记","createTime":"2025/07/03 02:39:45","permalink":"/studyNotes/rgul59iu/"},"readingTime":{"minutes":2.28,"words":685},"git":{"updatedTime":1748436020000,"contributors":[{"name":"Lang","username":"Lang","email":"914551901@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Lang?v=4","url":"https://github.com/Lang"}]},"filePathRelative":"notes/学习笔记/MyBatis-plus-kit/开发日记.md","headers":[]}');export{d as comp,c as data};
