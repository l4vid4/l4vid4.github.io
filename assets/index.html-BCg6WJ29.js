import{_ as i,c as a,a as t,o as l}from"./app-dsZ4C4U9.js";const h={};function n(e,s){return l(),a("div",null,s[0]||(s[0]=[t(`<p>[TOC]</p><h1 id="java八股文——mysql篇" tabindex="-1"><a class="header-anchor" href="#java八股文——mysql篇"><span>Java八股文——MySQL篇</span></a></h1><h2 id="慢查询" tabindex="-1"><a class="header-anchor" href="#慢查询"><span>慢查询</span></a></h2><h3 id="如何定位慢查询" tabindex="-1"><a class="header-anchor" href="#如何定位慢查询"><span>如何定位慢查询？</span></a></h3><p><strong>方案一：开源工具</strong></p><ul><li>调试工具：Arthas</li><li>运维工具：Prometheus、Skywalking</li></ul><p><strong>方案二：MySQL自带慢日志</strong></p><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。</p><p>如果要开启慢查询日志，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#开启MySQL慢日志查询</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">slow_query_log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">long_query_time</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何分析慢sql" tabindex="-1"><a class="header-anchor" href="#如何分析慢sql"><span>如何分析慢SQL</span></a></h3><ul><li>聚合查询（可以添加临时表解决）</li><li>多表查询（可以试着优化SQL语句结构）</li><li>表数据量过大查询</li><li>深度分页查询</li></ul><h4 id="explain" tabindex="-1"><a class="header-anchor" href="#explain"><span>Explain</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">EXPLAIN </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 字段列表 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 表名 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 条件;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong>possibel_key</strong> ：当前sql可能会使用到的索引</p></li><li><p><strong>key</strong> ：当前sql实际命中的索引</p></li><li><p><strong>key_len</strong> ：索引占用的大小</p></li><li><p><strong>Extra</strong> ：额外的优化建议</p><blockquote><ul><li>Using where; Using Index：查找使用了索引，需要的数据都在索引列中能找到，不需要回表查询数据</li><li>Using index condition：查找使用了索引，但是需要回表查询数据（有优化空间）</li></ul></blockquote></li><li><p><strong>type</strong>：这条sql的连接的类型，性能由好到差为<code>NULL、system、const、eq_ref、range、index、all</code></p><blockquote><p>NULL：查询没有用到表</p><p>system：查询系统中的表</p><p>const：根据主键查询</p><p>eq_ref：主键索引查询或唯一索引查询</p><p>ref：索引查询</p><p>range：范围查询</p><p>index：索引树扫描</p><p>all：全盘扫描</p></blockquote></li></ul><h4 id="标准答案" tabindex="-1"><a class="header-anchor" href="#标准答案"><span>标准答案</span></a></h4><p>如果一条sql执行很慢的话，我们通常会使用sql自动的执行计划explain去查看这条sql的执行情况，比如在这里面可以通过key和key_len检查是否命中了索引，如果本身已经添加了索引，也可以判断索引是否有失效的情况，第二个，可以通过type字段查看sql是否有进一步的优化空间，是否存在全索引扫描或全盘扫描，第三个可以通过extra建议来判断，是否出现了回表的情况，如果出现了可以尝试添加索引或修改返回字段来修复。</p><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引"><span>索引</span></a></h2><blockquote><p>索引（index）是帮助MySQL高校获取数据的数据结构（有序）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构（B+）树，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p></blockquote><h3 id="索引类型" tabindex="-1"><a class="header-anchor" href="#索引类型"><span>索引类型</span></a></h3><table><thead><tr><th>索引类型</th><th>是否唯一</th><th>是否允许为 NULL</th><th>是否支持多列</th><th>典型用途</th><th>特点总结</th></tr></thead><tbody><tr><td><strong>主键索引</strong></td><td>✅</td><td>❌</td><td>✅</td><td>唯一标识一条记录</td><td>表只能有一个主键，自动创建索引</td></tr><tr><td><strong>唯一索引</strong></td><td>✅</td><td>✅（仅一条 NULL）</td><td>✅</td><td>限制字段值不能重复</td><td>可有多个，允许一个 NULL 值</td></tr><tr><td><strong>普通索引</strong></td><td>❌</td><td>✅</td><td>✅</td><td>加速查询（如 WHERE、ORDER BY）</td><td>最常见，不强制唯一</td></tr><tr><td><strong>联合索引</strong></td><td>可选</td><td>✅</td><td>✅</td><td>多字段组合查询</td><td>遵循最左前缀原则</td></tr><tr><td><strong>全文索引</strong></td><td>❌</td><td>✅</td><td>✅（InnoDB 5.6+）</td><td>文本内容检索（英文效果好）</td><td>仅支持 <code>MATCH ... AGAINST</code> 查询</td></tr><tr><td><strong>空间索引</strong></td><td>❌</td><td>❌（必须非空）</td><td>✅</td><td>地理空间数据（GIS）</td><td>仅支持 <code>GEOMETRY</code> 类型字段</td></tr><tr><td><strong>前缀索引</strong></td><td>❌</td><td>✅</td><td>✅</td><td>长字符串字段索引优化</td><td>需指定前缀长度，节省索引空间</td></tr></tbody></table><h3 id="索引底层数据结构" tabindex="-1"><a class="header-anchor" href="#索引底层数据结构"><span>索引底层数据结构</span></a></h3><blockquote><p>MySQL默认使用的索引底层数据结构是B+树。</p><ul><li>阶数更多，路径更短</li><li>磁盘读写代价B+树更低，非叶子节点只存储指针，叶子节点存储数据</li><li>B+树便于扫库和区间查询，叶子节点是一个双向链表</li></ul><table><thead><tr><th>特性</th><th>B树</th><th>B+树</th></tr></thead><tbody><tr><td>数据存储位置</td><td>内部节点和叶子节点</td><td>仅叶子节点</td></tr><tr><td>叶子节点连接</td><td>无</td><td>有</td></tr><tr><td>查询路径</td><td>不一定到叶子节点</td><td>必定到叶子节点</td></tr><tr><td>范围查询效率</td><td>较低</td><td>高</td></tr><tr><td>节点扇出</td><td>较小</td><td>较大</td></tr><tr><td>应用场景</td><td>内存数据结构</td><td>外部存储（数据库、文件系统）</td></tr></tbody></table></blockquote><h3 id="什么是聚簇索引什么是非聚簇索引-二级索引-回表" tabindex="-1"><a class="header-anchor" href="#什么是聚簇索引什么是非聚簇索引-二级索引-回表"><span>什么是聚簇索引什么是非聚簇索引？（二级索引）（回表）</span></a></h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚簇索引（Clustered Index）</td><td>将数据存储与索引放到了一块，索引结构的叶子节点保存了整行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引（Secondary Index）</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><h4 id="聚集索引选取规则" tabindex="-1"><a class="header-anchor" href="#聚集索引选取规则"><span>聚集索引选取规则</span></a></h4><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</li></ul><h4 id="回表查询" tabindex="-1"><a class="header-anchor" href="#回表查询"><span>回表查询</span></a></h4><ul><li>在使用<strong>非聚簇索引</strong>查询时，<strong>先通过索引定位到主键值</strong>，再通过主键去<strong>聚簇索引中查找真实数据行</strong>的过程。</li></ul><h3 id="什么是覆盖索引" tabindex="-1"><a class="header-anchor" href="#什么是覆盖索引"><span>什么是覆盖索引</span></a></h3><blockquote><p>覆盖索引是指查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到。</p></blockquote><p><strong>举例</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#id为主键，默认是主键索引</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#name字段为普通索引</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;   #是覆盖索引，因为主键索引是聚簇索引，包括了一整行数据。不需要回表查询。</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id, </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">name</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Arm</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;    #是覆盖索引，因为条件使用了索引，并且要查询的字段id和name都使用了索引，不需要回表查询。</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id, </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, gender </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Arm</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;	#不是覆盖索引，因为返回的列中gender没有索引，所以需要回表查询。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql超大分页处理" tabindex="-1"><a class="header-anchor" href="#mysql超大分页处理"><span>MySQL超大分页处理</span></a></h3><blockquote><p>在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率较低。</p></blockquote><h4 id="覆盖索引-子查询" tabindex="-1"><a class="header-anchor" href="#覆盖索引-子查询"><span>覆盖索引+子查询</span></a></h4><ul><li><p>只查主键再回表，减少排序数据量</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> table</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">IN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> table</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> ORDER BY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100000</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sku t, (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sku </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">order by</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">limit</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100000</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) a </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> a</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> t.</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> table</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> ORDER BY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100000</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">JOIN</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> table</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> t </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ON</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> a</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="使用索引字段-条件过滤" tabindex="-1"><a class="header-anchor" href="#使用索引字段-条件过滤"><span>使用索引字段+条件过滤</span></a></h4><ul><li><p>通过记录上次的最大id来“跳页”</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 第一次查询</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> table</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> ORDER BY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 下一页（记录上一页最大 id 为 120）</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> table</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 120</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> ORDER BY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="存储游标或位置值" tabindex="-1"><a class="header-anchor" href="#存储游标或位置值"><span>存储游标或位置值</span></a></h4><ul><li>如果是固定翻页结构（如前端分页），可以在后端<strong>缓存当前页最大ID或游标</strong>，前端传回续查。</li></ul><h3 id="索引创建原则有哪些" tabindex="-1"><a class="header-anchor" href="#索引创建原则有哪些"><span>索引创建原则有哪些</span></a></h3><ol><li>针对与数据量较大，且查询比较频繁的表建立索引。 （单表超过10万数据）</li><li>针对常作为查询条件、排序、分组操作的字段建立索引。</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</li></ol><h3 id="什么情况下索引会失效" tabindex="-1"><a class="header-anchor" href="#什么情况下索引会失效"><span>什么情况下索引会失效</span></a></h3><h4 id="_1-违反最左前缀法则" tabindex="-1"><a class="header-anchor" href="#_1-违反最左前缀法则"><span>1. 违反最左前缀法则</span></a></h4><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。匹配最左前缀法则，走索引。</p><p><strong>正例</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- seller表有联合索引：name 1、status 2、address 3</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> seller </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">小米</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  #✅</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> seller </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">小米</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> and</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> status</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  #✅</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> seller </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">小米</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> and</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> status</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> and</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> address</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">北京市</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  #✅</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>反例</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- seller表有联合索引：name 1、status 2、address 3</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> seller </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> status</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> and</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> address</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">北京市</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  #❌</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> seller </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> status</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  #❌</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> seller </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">小米</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> and</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> address</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">北京市</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  #❌</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-范围查询右边的列-不能使用索引" tabindex="-1"><a class="header-anchor" href="#_2-范围查询右边的列-不能使用索引"><span>2. 范围查询右边的列，不能使用索引</span></a></h4><p>当遇到<strong>第一个范围查询</strong>时，联合索引<strong>后面的字段不再参与索引过滤</strong>，只能回表做判断。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> seller </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">小米</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> AND</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> status</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> AND</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> addres </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">北京市</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; #可以完全索引✅</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> seller </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">小米</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> AND</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> status</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> AND</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> addres </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">北京市</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; #在遇到第一个大于条件后，后面的字段（</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">address</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">）无法再参与索引❌</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-不能在索引列上进行运算操作-索引将失效" tabindex="-1"><a class="header-anchor" href="#_3-不能在索引列上进行运算操作-索引将失效"><span>3. 不能在索引列上进行运算操作，索引将失效</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> seller </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> substring</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">科技</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; #❌</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_4-字符串不加单引号-造成索引失效。" tabindex="-1"><a class="header-anchor" href="#_4-字符串不加单引号-造成索引失效。"><span>4. 字符串不加单引号，造成索引失效。</span></a></h4><p>索引字段是字符串，传入数字会触发隐式转换，索引失效。索引字段上发生任何的类型转换都会导致索引失效。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> seller </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> status</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; #✅</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> seller </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> status</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; #❌</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-like-开头是通配符" tabindex="-1"><a class="header-anchor" href="#_5-like-开头是通配符"><span>5. LIKE 开头是通配符</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> LIKE</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%Tom%</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  -- 前面有通配符，索引失效 ❌</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> LIKE</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Tom%</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   -- 后面通配符，索引生效 ✅</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sql优化的经验" tabindex="-1"><a class="header-anchor" href="#sql优化的经验"><span>SQL优化的经验</span></a></h3><h4 id="表的设计优化" tabindex="-1"><a class="header-anchor" href="#表的设计优化"><span>表的设计优化</span></a></h4><ul><li>设计表的时候参考了阿里开发手册《嵩山版》</li><li>比如设置合适的数值，要根据实际情况选择</li><li>比如设置合适的字符串类型，char定长效率高，varchar可变长度，效率稍低。长度尽量设置在2^n - 1；</li></ul><h4 id="sql语句优化" tabindex="-1"><a class="header-anchor" href="#sql语句优化"><span>SQL语句优化</span></a></h4><ul><li><p>SELECT语句务必指明字段名称（避免直接使用select *）</p></li><li><p>SQL语句要避免造成索引失效的写法</p></li><li><p>尽量使用union all代理union，union会多一次过滤，效率低</p><blockquote><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fromn user </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> union all</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; #</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Union</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> all会直接将两个查出来的进行拼接，不会过滤其中重复的</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> union</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; # Union会在拼接之后，帮你过滤掉其中重复的字段</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p>避免在where子句中对字段进行表达式操作</p></li><li><p>Join优化 能用<code>inner join</code>就不用<code>left join + right join</code>，如必须使用，一定要以小表为驱动。</p><blockquote><p>内连接会对两个表进行优化，优先把小表放到外边，把大表放到里边。left join或right join，不会调整顺序。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 小表 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LEFT JOIN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 大表 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ON</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 条件;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 大表 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RIGHT JOIN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 小表 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ON</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 条件;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>JOIN 类型</th><th>保留哪一侧全部数据</th><th>匹配不到的行是否显示</th><th>没匹配的列填什么</th></tr></thead><tbody><tr><td>INNER JOIN</td><td>两表都要匹配成功</td><td>否</td><td>不显示</td></tr><tr><td>LEFT JOIN</td><td>左表全部</td><td>是</td><td>NULL</td></tr><tr><td>RIGHT JOIN</td><td>右表全部</td><td>是</td><td>NULL</td></tr></tbody></table></blockquote></li></ul><h4 id="索引优化" tabindex="-1"><a class="header-anchor" href="#索引优化"><span>索引优化</span></a></h4><h4 id="主从复制、读写分离" tabindex="-1"><a class="header-anchor" href="#主从复制、读写分离"><span>主从复制、读写分离</span></a></h4><p>如果数据库的使用场景读的操作比较多的时候，为了避免写的操作所造成的性能影响，可以采用读写分离的架构。</p><p>读写分离解决的是，数据库的写入，影响了查询的效率。</p><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><h3 id="事务特性" tabindex="-1"><a class="header-anchor" href="#事务特性"><span>事务特性</span></a></h3><blockquote><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p></blockquote><h4 id="acid" tabindex="-1"><a class="header-anchor" href="#acid"><span>ACID</span></a></h4><ul><li>原子性（<strong>A</strong>tomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性（<strong>C</strong>onsistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（<strong>I</strong>solation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（<strong>D</strong>urability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h3 id="并发事务带来哪些问题" tabindex="-1"><a class="header-anchor" href="#并发事务带来哪些问题"><span>并发事务带来哪些问题</span></a></h3><h4 id="_1-脏读-dirty-read" tabindex="-1"><a class="header-anchor" href="#_1-脏读-dirty-read"><span>1. 脏读（Dirty Read）</span></a></h4><p>读取到了<strong>其他事务未提交的数据</strong>。</p><p><strong>示例：</strong></p><ul><li>事务A：修改账户余额为500，但<strong>未提交</strong>。</li><li>事务B：读取到余额是500（其实还没真正生效）。</li><li>后来事务A回滚了，数据其实还是原来的1000， → <strong>B读到的是“脏”的数据</strong>。</li></ul><h4 id="_2-不可重复读-non-repeatable-read" tabindex="-1"><a class="header-anchor" href="#_2-不可重复读-non-repeatable-read"><span>2. 不可重复读（Non-repeatable Read）</span></a></h4><p><strong>同一事务内，两次读取同一数据，值不一致</strong>。</p><p><strong>示例：</strong></p><ul><li>事务A：第一次查询账户余额是1000</li><li>事务B：修改余额为500并提交</li><li>事务A：再次查询余额变成500 → <strong>A两次读取结果不一致，称为不可重复读</strong></li></ul><h4 id="_3-幻读-phantom-read" tabindex="-1"><a class="header-anchor" href="#_3-幻读-phantom-read"><span>3. 幻读（Phantom Read）</span></a></h4><p><strong>同一事务内，两次查询数据集合，结果集的“行数”不同</strong>（有新行出现或消失）。</p><p><strong>示例：</strong></p><ul><li>事务A：查询“所有工资 &gt; 5000 的员工”返回10条</li><li>事务B：插入一条工资为6000的新员工并提交</li><li>事务A：再次查询，变成11条 → <strong>多了一条“幻影”数据，称为幻读</strong></li></ul><h3 id="四种隔离级别" tabindex="-1"><a class="header-anchor" href="#四种隔离级别"><span>四种隔离级别</span></a></h3><table><thead><tr><th>隔离级别</th><th>是否会脏读</th><th>不可重复读</th><th>幻读</th><th>并发性能</th><th>MySQL 默认</th></tr></thead><tbody><tr><td><strong>读未提交</strong>（Read Uncommitted）</td><td>✅ 会</td><td>✅ 会</td><td>✅ 会</td><td>高</td><td>❌</td></tr><tr><td><strong>读已提交</strong>（Read Committed）</td><td>❌ 不会</td><td>✅ 会</td><td>✅ 会</td><td>较高</td><td>❌（Oracle 默认）</td></tr><tr><td><strong>可重复读</strong>（Repeatable Read）</td><td>❌ 不会</td><td>❌ 不会</td><td>✅ 会</td><td>中</td><td>✅（MySQL 默认）</td></tr><tr><td><strong>串行化</strong>（Serializable）</td><td>❌ 不会</td><td>❌ 不会</td><td>❌ 不会</td><td>低（加锁最多）</td><td>❌</td></tr></tbody></table><blockquote><ol><li><strong>读未提交</strong></li></ol><ul><li>事务可以读到其他事务<strong>未提交的数据</strong>。</li><li>最弱隔离，可能出现脏读、不重复读、幻读。</li></ul><ol start="2"><li><strong>读已提交</strong></li></ol><ul><li>只能读到已提交的数据，避免脏读。</li><li>但事务期间数据可能被别的事务修改，出现不可重复读和幻读。</li><li>Oracle 默认隔离级别。</li></ul><ol start="3"><li><strong>可重复读（MySQL 默认）</strong></li></ol><ul><li>同一事务多次读取，结果<strong>始终一致</strong>（通过MVCC实现）。</li><li>解决了不可重复读。</li><li>幻读仍可能出现（但InnoDB通过<strong>间隙锁</strong>在某些场景下可防止幻读）。</li></ul><ol start="4"><li><strong>串行化</strong></li></ol><ul><li>所有操作都串行执行，强制加锁。</li><li>最安全，但并发性能最低。</li></ul></blockquote><h3 id="undo-log和redo-log的区别-事务的实现方式" tabindex="-1"><a class="header-anchor" href="#undo-log和redo-log的区别-事务的实现方式"><span>undo log和redo log的区别（事务的实现方式）</span></a></h3><ul><li>缓冲池（buffer pool）：主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。</li><li>数据页（page）：是InnoDB存储引擎磁盘管理的最小单元，每个页的大小默认为16KB。页中存储的是行数据。</li></ul><h4 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log"><span>undo log</span></a></h4><p>回滚日志，用于记录数据被修改前的信息，作用包含两个：<strong>提供回滚</strong>和<strong>MVCC（多版本并发控制）</strong>。undo log和redo log记录物理日志不一样，它是逻辑日志</p><ul><li><p>可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然</p></li><li><p>当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</p></li><li><p>作用：<strong>记录数据被修改前的旧值</strong>，用于：</p><blockquote><p>事务回滚</p><p>MVCC（多版本并发控制，支持快照读）</p></blockquote></li><li><p>触发场景：<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code> 时生成 undo log。</p></li></ul><h4 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log"><span>redo log</span></a></h4><p>重做日志，记录的是事务提交时数据页的物理修改，是<strong>用来实现事务的持久性</strong></p><p>该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file），前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中，用于在刷新脏页到磁盘，发生错误时，进行数据恢复使用。</p><ul><li><p>作用：<strong>记录数据修改后的新值</strong>，用于：</p><blockquote><p>事务提交后保证数据<strong>持久化</strong>（即使崩溃也能恢复）。</p></blockquote></li><li><p>触发场景：</p><blockquote><p>事务提交前，先把 redo log 写到磁盘（WAL：Write-Ahead Logging）。</p></blockquote></li></ul><table><thead><tr><th>项目</th><th>undo log</th><th>redo log</th></tr></thead><tbody><tr><td>作用</td><td>回滚、MVCC快照读</td><td>崩溃恢复、保证持久化</td></tr><tr><td>记录内容</td><td>修改前的数据</td><td>修改后的数据</td></tr><tr><td>使用时机</td><td>事务回滚、快照读</td><td>事务提交、宕机恢复</td></tr><tr><td>物理位置</td><td>InnoDB表空间（undo段）</td><td>InnoDB redo log 文件</td></tr><tr><td>典型用途</td><td>回滚、快照一致性</td><td>数据库宕机时恢复</td></tr></tbody></table><h3 id="事务的隔离性如何保证-mvcc" tabindex="-1"><a class="header-anchor" href="#事务的隔离性如何保证-mvcc"><span>事务的隔离性如何保证（MVCC）</span></a></h3><blockquote><p><strong>排他锁</strong></p><p>如果一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁。</p><p><strong>MVCC：多版本并发控制</strong>（Multi-Version Concurrency Control）。指维护一个数据的多个版本，使得读写操作没有冲突。</p></blockquote><h4 id="mvcc-实现原理" tabindex="-1"><a class="header-anchor" href="#mvcc-实现原理"><span>MVCC-实现原理</span></a></h4><ul><li><p><strong>记录中的隐藏字段</strong></p><blockquote><table><thead><tr><th>隐藏字段</th><th>含义</th></tr></thead><tbody><tr><td>DB_TRX_ID</td><td>最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID。</td></tr><tr><td>DB_ROLL_PTR</td><td>回滚指针，指向这条记录的上一个版本，用于配合undo log，指向上一个版本。</td></tr><tr><td>DB_ROW_ID</td><td>隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段。</td></tr></tbody></table></blockquote></li><li><p><strong>undo log</strong></p></li></ul><p>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。</p><p>当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。</p><p>而update、delete的时候，产生的undo log日志不仅在回滚时需要，mvcc版本访问也需要，不会立即被删除。</p><blockquote><p><strong>undo log版本链</strong></p><p>不同事务或相同事务对同一条记录进行修改，会导致该记录的undo log生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录。</p></blockquote><ul><li><strong>readview</strong></li></ul><p><strong>ReadVie</strong>（读视图）是快照SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。</p><blockquote><ul><li><p>当前读</p><p>读取的是记录的<strong>最新版本</strong>，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如<code>select ... log in share mode(共享锁)</code>，<code>select ... for update、update、insert、delete(排他锁)</code>都是一种当前读。</p></li><li><p>快照读</p><p>简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。</p><ul><li>读已提交（Read Committed）：每次select，都生成一个ReadView</li><li>可重复读（Repeatable Read）：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。</li></ul></li></ul></blockquote><p>ReadView中包含了<strong>四个核心字段</strong></p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>m_ids</td><td>当前活跃的事务ID集合</td></tr><tr><td>min_trx_id</td><td>最小活跃事务ID</td></tr><tr><td>max_trx_id</td><td>预分配事务ID，当前最大事务ID+1（因为事务ID是自增的）</td></tr><tr><td>creator_trx_id</td><td>ReadView创建者的事务ID</td></tr></tbody></table><p>版本链数据访问规则：</p><blockquote><p><strong>trx_id：代表是当前事务ID</strong></p><ol><li>trx_id == creator_trx_id？可以访问该版本✅ → 成立，说明数据是当前这个事务更改的。</li><li>trx_id &lt; min_trx_id？可以访问该版本✅ → 成立，说明数据已经提交了。</li><li>trx_id &gt; max_trx_id？不可以访问该版本❌ → 成立，说明该事务是在ReadView生成后才开启。</li><li>min_trx_id &lt;= trx_id &lt;= max_trx_id？如果trx_id不在m_ids中是<strong>可以</strong>访问该版本的✅ → 成立，说明数据已经提交。</li></ol><p><strong>总结：<strong>只看</strong>在当前 ReadView 生成前已经提交的版本</strong>，未提交的版本看不到。</p></blockquote><h2 id="主从同步" tabindex="-1"><a class="header-anchor" href="#主从同步"><span>主从同步</span></a></h2><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><blockquote><p>MySQL主从复制的核心就是二进制日志：</p><p>​ 二进制日志（BINLOG）记录了所有的DDL（数据定义语言）语句和DML（数据操纵语言）语句，但不包括数据查询（SELECT、SHOW）语句。</p></blockquote><ol><li>Master主库在事务提交时，会把数据变更记录在二进制日志文件Binlog中。</li><li>从库读取主库的二进制日志文件Binlog，写入到从库的中继日志Relay Log。</li><li>slave重做中继日志中的事件，将改变反映它自己的数据。</li></ol><h3 id="主从同步和双机热备区别" tabindex="-1"><a class="header-anchor" href="#主从同步和双机热备区别"><span>主从同步和双机热备区别</span></a></h3><table><thead><tr><th>对比点</th><th>主从同步</th><th>双机热备</th></tr></thead><tbody><tr><td>目的</td><td>提升读性能 / 备份</td><td>高可用、故障自动切换</td></tr><tr><td>数据同步方向</td><td>单向（主 → 从）</td><td>通常双向或实时同步</td></tr><tr><td>故障切换</td><td>需手动或自动提升从为主</td><td>快速切换，秒级高可用</td></tr><tr><td>负载分担</td><td>主写、从读（读写分离）</td><td>一般主负责，备不参与业务</td></tr><tr><td>常见场景</td><td>读多写少系统</td><td>强要求高可用、不能停机系统</td></tr></tbody></table><h4 id="主从同步-主库-→-从库" tabindex="-1"><a class="header-anchor" href="#主从同步-主库-→-从库"><span>主从同步（主库 → 从库）</span></a></h4><p><strong>特点</strong>：</p><ul><li>主库处理 <strong>写请求</strong>，从库主要处理 <strong>读请求</strong>。</li><li>数据同步是 <strong>单向的</strong>（主 → 从）。</li><li>一般用于 <strong>读写分离</strong>、<strong>提升读性能</strong>、<strong>备份</strong>。</li><li>可能存在 <strong>同步延迟</strong>。</li></ul><h4 id="双机热备-ha-高可用" tabindex="-1"><a class="header-anchor" href="#双机热备-ha-高可用"><span>双机热备（HA，高可用）</span></a></h4><p><strong>特点</strong>：</p><ul><li>两台机器（主 + 备）运行同一套服务，<strong>互为备份</strong>。</li><li>备机通常处于 <strong>热备状态</strong>，实时或准实时同步数据。</li><li>主机故障后，<strong>快速切换</strong>到备机，保证业务连续。</li><li>目标是 <strong>高可用（HA）</strong>，不是分担读写负载。</li></ul><h2 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表"><span>分库分表</span></a></h2><blockquote><p>分库分表的时机：</p><ol><li><p>前提，项目业务数据逐渐增多，或业务发展比较迅速。单表的数据量达到1000W或20G以后</p></li><li><p>优化已解决不了性能问题（主从读写分离、查询索引）</p></li><li><p>IO瓶颈（磁盘IO、网络IO）、CPU瓶颈（聚合查询、连接数太多）</p></li></ol></blockquote><h3 id="拆分策略" tabindex="-1"><a class="header-anchor" href="#拆分策略"><span>拆分策略</span></a></h3><h4 id="垂直拆分" tabindex="-1"><a class="header-anchor" href="#垂直拆分"><span>垂直拆分</span></a></h4><ul><li><p>垂直分库：以表为依据，根据业务将不同的表拆分到不同库中。</p><blockquote><p>特点：</p><ol><li>按业务对数据分级管理、维护、监控、扩展</li><li>在高并发下，提高磁盘IO和数据量连接数</li></ol></blockquote></li><li><p>垂直分表：以字段为依据，根据字段属性将不同字段拆分到不同表中。</p><blockquote><p>拆分规则：</p><ul><li>把不常用的字段单独放在一张表</li><li>把text，blob等大字段拆分出来放在附表中</li></ul><p>特点：</p><ul><li>冷热数据分离</li><li>减少IO过度争抢，两表互不影响</li></ul></blockquote></li></ul><h4 id="水平拆分" tabindex="-1"><a class="header-anchor" href="#水平拆分"><span>水平拆分</span></a></h4><ul><li><p>水平分库：将一个库的数据拆分到多个库中。</p><blockquote><p>路由规则：</p><ul><li>根据id节点取模</li><li>按用户 ID、地区、业务线、时间分。</li><li>按id进行范围路由，节点1（1-100万），节点2（100万-200万）</li><li>...</li></ul><p>特点：</p><ul><li>解决了单库大数量，高并发的性能瓶颈问题</li><li>提高了系统的稳定性和可用性</li></ul></blockquote></li><li><p>水平分表：将一个表的数据拆分到多个表中（可以在同一个库内）。</p><blockquote><p>路由规则同水平分库</p><p>特点：</p><ul><li>优化单一表数据量过大而产生的性能问题。</li><li>避免IO争抢并减少锁表的几率。</li></ul></blockquote></li></ul><h3 id="新的问题和新的技术" tabindex="-1"><a class="header-anchor" href="#新的问题和新的技术"><span>新的问题和新的技术</span></a></h3><ul><li>分布式事务一致性问题</li><li>跨节点关联查询</li><li>跨节点分页、排序函数</li><li>主键避重</li></ul><h4 id="分库分表中间件" tabindex="-1"><a class="header-anchor" href="#分库分表中间件"><span>分库分表中间件：</span></a></h4><ul><li>sharding-sphere</li><li></li></ul>`,138)]))}const d=i(h,[["render",n]]),p=JSON.parse('{"path":"/studyNotes/sc0na25e/","title":"面试题-MySQL","lang":"zh-CN","frontmatter":{"title":"面试题-MySQL","createTime":"2025/07/03 02:39:45","permalink":"/studyNotes/sc0na25e/"},"readingTime":{"minutes":19.47,"words":5840},"git":{"updatedTime":1749436129000,"contributors":[{"name":"Lang","username":"Lang","email":"914551901@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Lang?v=4","url":"https://github.com/Lang"}]},"filePathRelative":"notes/学习笔记/八股文/面试题-MySQL.md","headers":[]}');export{d as comp,p as data};
