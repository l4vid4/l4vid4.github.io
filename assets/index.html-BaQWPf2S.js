import{_ as s,c as a,a as t,o as n}from"./app-dsZ4C4U9.js";const e="/assets/1719570477922-ad595a67-be98-4272-9e13-8ad73dd75c13-1749469460215-3-DxvoA8Bi.png",l="/assets/image-20250609163946396-C790aaFQ.png",r="/assets/image-20250609201639810-kTj8XYTM.png",h="/assets/image-20250609201751274-CVnyWol5.png",d="/assets/image-20250609171623274-Qgs-vBtf.png",p="/assets/image-20250609171823279-BVG2XprJ.png",k="/assets/1715933382453-968d55a3-059b-423d-9f67-0ebf732fc400-ix4AFI64.png",o="/assets/1715933831252-4dbe4ae0-8072-4512-b54b-39ea5e8b3153-cSByQWTi.png",g={};function c(y,i){return n(),a("div",null,i[0]||(i[0]=[t(`<p>[TOC]</p><h1 id="java八股文——spring篇" tabindex="-1"><a class="header-anchor" href="#java八股文——spring篇"><span>Java八股文——Spring篇</span></a></h1><h2 id="spring" tabindex="-1"><a class="header-anchor" href="#spring"><span>Spring</span></a></h2><h3 id="spring的ioc和aop" tabindex="-1"><a class="header-anchor" href="#spring的ioc和aop"><span>Spring的IoC和AOP</span></a></h3><blockquote><p>**IoC：**即控制反转的意思，它是一种创建和获取对象的技术思想，依赖注入（DI）是实现这种技术的一种方式。传统开发过程中，我们需要通过new关键字来创建对象。使用IoC思想开发方式的话，我们不通过new关键字创建对象，而是通过IoC容器来帮助我们实例化对象。通过IoC的方式，可以大大降低对象之间的耦合度。</p><p><strong>AOP</strong>：面向切面编程，能够将那些与业务无关，却为业务模块所共同调用的逻辑封装起来，以减少系统的重复代码，降低模块间的耦合度。Spring AOP就是基于动态代理的，如果要代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用JDK Proxy去进行代理了，这时候Spring AOP会使用Cglib生成一个被代理对象的子类来作为代理。</p></blockquote><h4 id="spring-ioc实现机制" tabindex="-1"><a class="header-anchor" href="#spring-ioc实现机制"><span>Spring IoC实现机制</span></a></h4><ul><li><p>**反射：**Spring IoC容器利用Java的反射机制动态加载类、创建对象实例及调用对象方法，反射允许在运行时检查类、方法、属性等信息，从而实现灵活的对象实例化和管理。</p></li><li><p>**依赖注入：**IoC的核心概念是依赖注入，即容器负责管理应用程序组件之间的依赖关系。Spring通过构造函数注入、属性注入或方法注入，将组件之间的依赖关系描述在配置文件中或使用注解。</p><blockquote><p>依赖注入是将对象的创建和依赖关系的管理交给Spring容器来完成，类只需要声明自己所依赖的对象， 容器在运行时将这些依赖对象注入到类中，从而降低了类与类之间的耦合度，提高了代码的可维护性和可测试性。</p><ul><li>构造器注入：通过构造函数传递依赖对象，保证对象初始化时依赖已就绪。</li><li>Setter方法注入：通过Setter方法设置依赖，灵活性高，但依赖可能未完全初始化。</li><li>字段注入：直接通过<code>@Autowired</code>注解字段，代码简洁但隐藏依赖关系，不推荐生产代码。</li></ul></blockquote></li><li><p>**设计模式-工厂模式：**Spring IoC容器通常采用工厂模式来管理对象的创建和生命周期。容器作为工厂负责实例化Bean并管理它们的生命周期，将Bean的实例化过程交给容器来管理。</p></li><li><p>**容器实现：**Spring IoC容器是实现IoC的核心，通常使用BeanFactory或ApplicationContext来管理Bean。BeanFactory是IoC容器的基本形式，提供基本的IoC功能；ApplicationContext是BeanFactory扩展，并提供更多企业级功能。</p></li></ul><h4 id="spring-aop实现机制" tabindex="-1"><a class="header-anchor" href="#spring-aop实现机制"><span>Spring AOP实现机制</span></a></h4><blockquote><p>Spring AOP的实现依赖于<strong>动态代理技术</strong>。动态代理是在运行时动态生成代理对象，而不是在编译时。它允许开发者在运行时指定要代理的接口和行为，从而实现在不修改源码的情况下增强方法的功能。</p></blockquote><p>SpringAOP支持两种动态代理：</p><ul><li>基于JDK的动态代理：使用<code>java.lang.reflect.Proxy</code>类和<code>java.lang.reflect.InvocationHandler</code>接口实现。这种方式需要代理的类实现一个或多个接口。</li><li>基于CGLIB的动态代理：当被代理的类没有实现接口时，Spring会使用CGLIB库生成一个被代理类的子类作为代理。CGLIB是一个第三方代码生成库，通过继承方式实现代理。</li></ul><h3 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理"><span>动态代理</span></a></h3><table><thead><tr><th>特性</th><th>JDK 动态代理</th><th>CGLIB</th><th>ByteBuddy</th></tr></thead><tbody><tr><td>是否内置于 JDK</td><td>是</td><td>否（需要额外依赖）</td><td>否（需要额外依赖）</td></tr><tr><td>代理对象</td><td>接口</td><td>类</td><td>类（也支持接口）</td></tr><tr><td>代理原理</td><td>Java 反射 + Proxy.newProxyInstance</td><td>继承目标类，动态生成子类</td><td>修改或生成字节码</td></tr><tr><td>是否支持 final 类</td><td>否</td><td>否</td><td>支持</td></tr><tr><td>是否支持 final 方法</td><td>否</td><td>否</td><td>支持（可配置）</td></tr><tr><td>性能</td><td>较高（接口）</td><td>较高（类）</td><td>非常高，灵活</td></tr></tbody></table><h4 id="jdk-proxy" tabindex="-1"><a class="header-anchor" href="#jdk-proxy"><span>JDK Proxy</span></a></h4><p>这种类型的代理要求目标对象必须实现至少一个接口。Java动态代理会创建一个实现了相同接口的代理类，然后在运行时动态生成该类的实例。这种代理的核心是<code>java.lang.reflect.Proxy</code>类和<code>java.lang.reflect.InvocationHandler</code>接口。每一个动态代理类都必须实现<code>InvocationHandler</code>接口，并且每个代理类的实例都关联到一个<code>handler</code>。当通过代理对象调用一个方法时，这个方法的调用会被转发为由<code>InvocationHandler</code>接口的<code>invoke()</code>方法来进行调用。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">HelloService</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">HelloService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">newProxyInstance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    HelloService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> Class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">HelloService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">proxyObj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Before method</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">invoke</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">realObj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cglib" tabindex="-1"><a class="header-anchor" href="#cglib"><span>CGLIB</span></a></h4><ul><li><p>使用 CGLIB（Code Generation Library）库。</p></li><li><p>通过<strong>继承目标类</strong>，动态生成子类。</p></li><li><p>使用<strong>ASM 字节码框架</strong>底层生成字节码。</p></li><li><p>不能代理 final 类 / final 方法。</p></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Enhancer</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> enhancer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Enhancer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">enhancer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setSuperclass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">TargetClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">enhancer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setCallback</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">((</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MethodInterceptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Before method</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">invokeSuper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TargetClass</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TargetClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> enhancer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">create</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bytebuddy" tabindex="-1"><a class="header-anchor" href="#bytebuddy"><span>ByteBuddy</span></a></h4><ul><li><p>使用ByteBuddy框架，<strong>动态生成/修改字节码</strong>。</p></li><li><p>不仅能做代理，还能修改类定义，创建复杂代理。</p></li><li><p>灵活性高，可以代理final类、final方法。</p></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">HelloService</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ByteBuddy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">subclass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">HelloService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ElementMatchers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">any</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">intercept</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MethodDelegation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">to</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> HelloServiceInterceptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()))</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">load</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">HelloService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getLoaded</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">newInstance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring框架中的单例bean是线程安全的吗" tabindex="-1"><a class="header-anchor" href="#spring框架中的单例bean是线程安全的吗"><span>Spring框架中的单例Bean是线程安全的吗？</span></a></h3><blockquote><p>Spring框架中的bean是单例的吗？</p><ul><li>singleton：bean在每个Spring IOC容器中只有一个实例。<strong>默认</strong>，通过<code>@Scope(&quot;singleton&quot;)</code>指定。</li><li>prototype：一个bean的定义可以有多个实例。</li></ul></blockquote><ul><li>不是线程安全的</li><li>Spring框架中有一个@Scope注解，默认的值就是singleton，单例的。</li><li>因为一般在Spring的bean中都是注入无状态的对象，没有线程安全问题，如果在bean中定义了可修改的成员变量，是要考虑线程安全问题的，可以使用多例或者加锁来解决。</li></ul><h3 id="什么是aop-你们项目中有没有使用到aop" tabindex="-1"><a class="header-anchor" href="#什么是aop-你们项目中有没有使用到aop"><span>什么是AOP，你们项目中有没有使用到AOP</span></a></h3><blockquote><p>AOP称为面向切面编程，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。</p></blockquote><p><strong>常见AOP使用场景：</strong></p><ul><li>记录操作日志</li><li>缓存处理</li><li>Spring中内置的事务处理</li></ul><h4 id="spring中的事务是如何实现的" tabindex="-1"><a class="header-anchor" href="#spring中的事务是如何实现的"><span>Spring中的事务是如何实现的</span></a></h4><p>Spring支持编程式事务管理和声明式事务管理两种方式</p><ul><li><p>编程式事务控制：需使用TransactionTemplate来进行实现，对业务代码有侵入性，项目中很少使用</p></li><li><p>声明式事务管理：声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编制到拦截的方法中，也就是在目标方法开始之前加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p></li><li><p><code>@Trasactional</code></p></li></ul><h3 id="spring中事务失效的场景有哪些方法" tabindex="-1"><a class="header-anchor" href="#spring中事务失效的场景有哪些方法"><span>Spring中事务失效的场景有哪些方法</span></a></h3><h4 id="异常捕获处理" tabindex="-1"><a class="header-anchor" href="#异常捕获处理"><span>异常捕获处理</span></a></h4><ul><li><p>事务通知只有捕捉到了目标抛出的异常，才能进行后续的回滚处理，如果目标自己处理掉异常，事务通知无法知悉</p></li><li><p>**解决方法：**在catch块添加throw new RuntimeException(e)抛出</p></li></ul><h4 id="抛出检查异常" tabindex="-1"><a class="header-anchor" href="#抛出检查异常"><span>抛出检查异常</span></a></h4><ul><li><p>Spring默认只会回滚非检查异常。</p><blockquote><h3 id="检查异常-checked-exception" tabindex="-1"><a class="header-anchor" href="#检查异常-checked-exception"><span><strong>检查异常（Checked Exception）</strong></span></a></h3><ul><li><strong>继承自 <code>Exception</code>，但不是 <code>RuntimeException</code> 的子类</strong>。</li><li>编译时<strong>强制检查</strong>，必须使用 <code>try-catch</code> 捕获，或者 <code>throws</code> 抛出。</li><li>典型场景：<strong>外部资源操作</strong>，如文件、网络、数据库。</li><li>例子： <ul><li><code>IOException</code></li><li><code>SQLException</code></li><li><code>ParseException</code></li></ul></li></ul><p><strong>非检查异常（Unchecked Exception）</strong></p><ul><li><strong>继承自 <code>RuntimeException</code></strong>。</li><li>编译器<strong>不强制处理</strong>，可以不写 <code>try-catch</code> 或 <code>throws</code>。</li><li>通常是程序逻辑错误，程序员自己修正。</li><li>例子： <ul><li><code>NullPointerException</code></li><li><code>ArrayIndexOutOfBoundsException</code></li><li><code>IllegalArgumentException</code></li></ul></li></ul></blockquote></li><li><p>**解决方法：**添加<code>@Transactional(rollbackFor = Exception.class)</code></p></li></ul><h4 id="非public方法导致事务失效" tabindex="-1"><a class="header-anchor" href="#非public方法导致事务失效"><span>非public方法导致事务失效</span></a></h4><ul><li>Spring为方法创建代理、添加事务通知、前提条件都是该方法是public的</li><li>**解决方法：**改为public方法</li></ul><h4 id="自调用" tabindex="-1"><a class="header-anchor" href="#自调用"><span>自调用</span></a></h4><ul><li>同一个类中一个方法调用另一个 <code>@Transactional</code> 方法，事务不会生效（因为绕过了 Spring 的代理）</li></ul><h4 id="多线程操作" tabindex="-1"><a class="header-anchor" href="#多线程操作"><span>多线程操作</span></a></h4><ul><li><code>@Transactional</code> 只作用于当前线程，<strong>新开线程</strong>不会受事务控制。</li></ul><h3 id="spring的bean的生命周期" tabindex="-1"><a class="header-anchor" href="#spring的bean的生命周期"><span>Spring的Bean的生命周期</span></a></h3><p><img src="`+e+'" alt="https://cdn.xiaolincoding.com//picgo/1719570477922-ad595a67-be98-4272-9e13-8ad73dd75c13.png"></p><h4 id="beandefinition" tabindex="-1"><a class="header-anchor" href="#beandefinition"><span>BeanDefinition</span></a></h4><blockquote><p>Spring容器在进行实例化时，会将xml配置的&lt;bean&gt;的信息封装成一个BeanDefinition对象，Spring根据BeanDefinition来创建Bean对象，里面有很多的属性来描述Bean。</p></blockquote><h4 id="bean生命周期" tabindex="-1"><a class="header-anchor" href="#bean生命周期"><span>Bean生命周期</span></a></h4><ol><li>通过BeanDefinition获取bean的定义信息。</li><li>调用构造函数实例化bean</li><li>bean的依赖注入</li><li>处理Aware接口（BeanNameAware、BeanClassLoaderAware、BeanFactoryAware、ApplicationContextAware）</li><li>Bean的后置处理器<code>BeanPostProcessor</code>-前置，执行所有注册的 <code>BeanPostProcessor</code> 的 <code>postProcessBeforeInitialization</code> 方法，允许对 Bean 进行修改。</li><li>初始化方法（InitializingBean、init-method），如果实现了 <code>InitializingBean</code>，调用其 <code>afterPropertiesSet</code> 方法。如果配置了 <code>init-method</code>，调用该方法。</li><li>Bean的后置处理器BeanPostProcessor-后置，执行所有注册的 <code>BeanPostProcessor</code> 的 <code>postProcessAfterInitialization</code> 方法，允许对 Bean 进行修改增强（如 AOP 代理）。</li><li>销毁阶段，如果实现了 <code>DisposableBean</code>，调用其 <code>destroy</code> 方法。如果配置了 <code>destroy-method</code>，调用该方法。</li></ol><h3 id="spring中的循环依赖" tabindex="-1"><a class="header-anchor" href="#spring中的循环依赖"><span>Spring中的循环依赖</span></a></h3><blockquote><p><strong>Spring 循环依赖</strong>指的是 <strong>多个 Bean 之间互相依赖，形成闭环</strong>，在创建 Bean 时相互引用，导致无法完成实例化过程。</p></blockquote><h4 id="三级缓存" tabindex="-1"><a class="header-anchor" href="#三级缓存"><span>三级缓存</span></a></h4><p>循环依赖在Spring中是允许存在，spring框架依据三级缓存已经解决了大部分的循环依赖问题</p><blockquote><ol><li>一级缓存：单例池，缓存已经经历了完整的生命周期，已经初始化完成的bean对象</li><li>二级缓存：缓存早期的bean对象（生命周期还没走完）</li><li>三级缓存：缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的</li></ol></blockquote><p><img src="'+l+`" alt="image-20250609163946396"></p><h4 id="构造方法出现循环依赖" tabindex="-1"><a class="header-anchor" href="#构造方法出现循环依赖"><span>构造方法出现循环依赖</span></a></h4><blockquote><p>优于Bean生命周期第一步就是执行构造函数，所以三级缓存无法解决构造方法出现的循环依赖</p></blockquote><ul><li><p>解决方式：加<code>@Lazy</code>延迟加载</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Lazy</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> B b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring给我们提供了很多扩展点" tabindex="-1"><a class="header-anchor" href="#spring给我们提供了很多扩展点"><span>Spring给我们提供了很多扩展点</span></a></h3><table><thead><tr><th>扩展点接口</th><th>说明</th><th>典型使用场景</th></tr></thead><tbody><tr><td><code>BeanFactoryPostProcessor</code></td><td>BeanFactory 初始化后，修改 BeanDefinition</td><td>修改 Bean 属性定义，比如修改配置值</td></tr><tr><td><code>BeanDefinitionRegistryPostProcessor</code></td><td>在 BeanFactoryPostProcessor 之前，操作 BeanDefinition 注册表</td><td>动态注册 BeanDefinition</td></tr><tr><td><code>BeanPostProcessor</code></td><td>Bean 实例化后，初始化前后进行处理</td><td>AOP、事务、注入代理 Bean</td></tr><tr><td><code>InstantiationAwareBeanPostProcessor</code></td><td>BeanPostProcessor 子接口，控制 Bean 实例化过程</td><td>提前暴露代理对象、循环依赖处理</td></tr><tr><td><code>SmartInstantiationAwareBeanPostProcessor</code></td><td>更智能的 InstantiationAwareBeanPostProcessor</td><td>预测 Bean 类型、提前暴露 Bean</td></tr><tr><td><code>ApplicationContextInitializer</code></td><td>ApplicationContext 初始化时执行</td><td>自定义 ApplicationContext 初始化逻辑</td></tr><tr><td><code>ApplicationListener</code></td><td>监听 ApplicationEvent 事件</td><td>发布订阅模式，解耦组件</td></tr><tr><td><code>EnvironmentPostProcessor</code></td><td>修改 Environment 对象，优先加载配置</td><td>修改配置属性，优先级比配置文件还高</td></tr><tr><td><code>CommandLineRunner</code></td><td>Spring Boot 启动完成后执行</td><td>启动后执行任务（如初始化数据）</td></tr><tr><td><code>ApplicationRunner</code></td><td>Spring Boot 启动完成后执行，支持 ApplicationArguments</td><td>更灵活的启动后执行任务</td></tr></tbody></table></li></ul><h3 id="spring的常见注解有哪些" tabindex="-1"><a class="header-anchor" href="#spring的常见注解有哪些"><span>Spring的常见注解有哪些</span></a></h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Component、@Controller、@Service、@Repository</code></td><td>使用在类上用于实例化Bean</td></tr><tr><td><code>@Autowired</code></td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td><code>@Qualifier</code></td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td><code>@Scope</code></td><td>标注Bean的作用范围</td></tr><tr><td><code>@Configuration</code></td><td>指定当前类是一个Spring配置类，当创建容器时会从该类上加载注解</td></tr><tr><td><code>@ComponentScan</code></td><td>用于指定Spring在初始化容器时要扫描的包</td></tr><tr><td><code>@Bean</code></td><td>使用在方法上，标注将该方法的返回值存储到Spring容器中</td></tr><tr><td><code>@Import</code></td><td>使用@Import导入的类会被Spring加载到IOC容器中</td></tr><tr><td><code>@Transactional</code></td><td>声明式事务管理</td></tr><tr><td><code>@Aspect、@Before、@After、@Around、@Pointcut</code></td><td>用于切面编程（AOP）</td></tr></tbody></table><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot"><span>SpringBoot</span></a></h2><h3 id="为什么使用springboot" tabindex="-1"><a class="header-anchor" href="#为什么使用springboot"><span>为什么使用SpringBoot</span></a></h3><ul><li>简化开发：SpringBoot通过提供一系列的开箱即用的组件和自动配置，简化了项目的配置和开发过程，开发人员可以更专注于业务逻辑的实现，而不需要花费过多时间在繁琐的配置上。</li><li>快速启动：SpringBoot提供了快速的应用程序启动方式，可通过内嵌的Tomcat、Jetty或Undertow等容器快速启动应用程序，无需额外的配置步骤，方便快捷。</li><li>自动化配置：SpringBoot通过自动配置功能，根据项目中的依赖关系和约定俗成的规则来配置应用程序，减少了配置的复杂性，使开发者更容易实现应用的最佳实践。</li></ul><h3 id="springboot自动配置原理" tabindex="-1"><a class="header-anchor" href="#springboot自动配置原理"><span>SpringBoot自动配置原理</span></a></h3><blockquote><p>借助 <code>@EnableAutoConfiguration</code> + <code>spring.factories</code> 机制，自动装配符合条件的 Bean，减少手动配置。</p><div class="language-less line-numbers-mode" data-highlighter="shiki" data-ext="less" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    |</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">EnableAutoConfiguration</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    |</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">AutoConfigurationImportSelector</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    |</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">读取</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> META</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">INF</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">spring.factories</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    |</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">按条件导入</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> xxxAutoConfiguration</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    |</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">自动装配</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Bean</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 进</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IoC</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 容器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="_1️⃣-启动入口" tabindex="-1"><a class="header-anchor" href="#_1️⃣-启动入口"><span>1️⃣ 启动入口</span></a></h4><ul><li><code>@SpringBootApplication</code> 注解其实是组合注解，里面包含： <ul><li><code>@EnableAutoConfiguration</code></li><li><code>@ComponentScan</code></li><li><code>@Configuration</code></li></ul></li></ul><h4 id="_2️⃣-enableautoconfiguration" tabindex="-1"><a class="header-anchor" href="#_2️⃣-enableautoconfiguration"><span>2️⃣ EnableAutoConfiguration</span></a></h4><ul><li>核心注解是 <code>@EnableAutoConfiguration</code>。</li><li>它通过 <code>@AutoConfigurationImportSelector</code> 实现自动配置导入。</li></ul><h4 id="_3️⃣-autoconfigurationimportselector" tabindex="-1"><a class="header-anchor" href="#_3️⃣-autoconfigurationimportselector"><span>3️⃣ AutoConfigurationImportSelector</span></a></h4><ul><li>作用：扫描 <strong>所有需要自动配置的类</strong>，动态导入到 Spring 容器。</li><li>自动配置类来自 <code>META-INF/spring.factories</code> 或 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件中定义。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span># META-INF/spring.factories 示例</span></span>
<span class="line"><span>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span></span>
<span class="line"><span>org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\</span></span>
<span class="line"><span>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4️⃣-条件装配" tabindex="-1"><a class="header-anchor" href="#_4️⃣-条件装配"><span>4️⃣ 条件装配</span></a></h4><ul><li>每个 <code>xxxAutoConfiguration</code> 配置类，内部通常会使用以下注解组合，按需配置： <ul><li><code>@ConditionalOnClass</code> → 某个类存在时才生效。</li><li><code>@ConditionalOnMissingBean</code> → 容器里没有某个 Bean 时才创建。</li><li><code>@ConditionalOnProperty</code> → 某个配置开启时生效。</li><li><code>@ConditionalOnBean</code> / <code>@ConditionalOnMissingBean</code> → 依赖其他 Bean。</li></ul></li></ul><p><strong>保证不会乱配、重复配，按需装配。</strong></p><h4 id="_5️⃣-装配完成" tabindex="-1"><a class="header-anchor" href="#_5️⃣-装配完成"><span>5️⃣ 装配完成</span></a></h4><ul><li>满足条件的 Bean 被自动注册进 IoC 容器。</li><li>我们只需要简单配置 yml/properties 即可生效。</li></ul><h3 id="springboot用到哪些设计模式" tabindex="-1"><a class="header-anchor" href="#springboot用到哪些设计模式"><span>SpringBoot用到哪些设计模式</span></a></h3><table><thead><tr><th>设计模式</th><th>应用场景</th></tr></thead><tbody><tr><td>单例模式</td><td>Bean 默认单例</td></tr><tr><td>工厂模式</td><td>BeanFactory、ApplicationContext 创建 Bean</td></tr><tr><td>代理模式</td><td>AOP 实现方法拦截、事务管理</td></tr><tr><td>观察者模式</td><td>事件发布监听（ApplicationEventPublisher）</td></tr><tr><td>模板方法模式</td><td>JdbcTemplate、RestTemplate、事务模板</td></tr><tr><td>策略模式</td><td>多种 Bean 实现同一接口时，按需选择</td></tr><tr><td>适配器模式</td><td>HandlerAdapter 适配不同类型的 Controller</td></tr><tr><td>装饰器模式</td><td>Servlet Filter 链、增强 Bean 功能</td></tr><tr><td>责任链模式</td><td>Spring Security 过滤器链、FilterChain</td></tr><tr><td>建造者模式</td><td>配置对象（Builder）、RestTemplateBuilder</td></tr><tr><td>享元模式</td><td>复用 Bean 减少内存消耗</td></tr></tbody></table><h3 id="怎么理解springboot中的约定大于配置" tabindex="-1"><a class="header-anchor" href="#怎么理解springboot中的约定大于配置"><span>怎么理解SpringBoot中的约定大于配置</span></a></h3><blockquote><p><strong>框架提供了一套合理默认配置</strong>，只要你按照约定来组织代码、命名、放位置，大部分功能可以<strong>开箱即用</strong>，你不需要写很多配置。</p></blockquote><ul><li><strong>自动化配置</strong>：SpringBoot提供了大量的自动化配置，通过分析项目的依赖和环境，自动配置应用程序的行为。开发者无需显式地配置每个细节，大部分常用的配置都已经预设好了。</li><li><strong>默认配置</strong>：SpringBoot为诸多方面提供了大量默认配置，如连接数据、设置Web服务器、处理日志。开发人员无需手动配置这些常见内容，框架与做好决策。</li><li><strong>约定的项目结构</strong>：SpringBoot提倡特定项目结构，通常主应用程序类（含main方法）置于根包，控制器类、服务类、数据访问类等分别放在相应子包。</li></ul><h3 id="springboot项目结构" tabindex="-1"><a class="header-anchor" href="#springboot项目结构"><span>SpringBoot项目结构</span></a></h3><p><img src="`+r+'" alt="image-20250609201639810"></p><h4 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图"><span>流程图</span></a></h4><p><img src="'+h+`" alt="image-20250609201751274"></p><h3 id="说几个starter" tabindex="-1"><a class="header-anchor" href="#说几个starter"><span>说几个Starter</span></a></h3><ul><li>sping-boot-stater-web：最常用的起步依赖之一，包含Spring MVC和Tomcat嵌入式服务，用于快速构建Web应用程序</li><li>sping-boot-starter-security：提供了Spring Security的基本配置。</li><li>mybatis-spring-boot-starter：简化Spring Boot应用中集成MyBatis的过程。</li><li>spring-boot-starter-data-redis：继承Reds缓存。</li><li>sping-boot-starter-test：包含单元测试和集成测试所需的库，如JUnit，Spring Test等。</li></ul><h3 id="写过springboot-starter吗" tabindex="-1"><a class="header-anchor" href="#写过springboot-starter吗"><span>写过SpringBoot starter吗</span></a></h3><ol><li><p>创建Maven项目，添加Spring Boot和starter parent和一些必要依赖</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">parent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-parent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2.7.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">parent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-web</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-autoconfigure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写自动配置类和属性类，属性类绑定配置文件中的属性。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">github</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">l4vid4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">starter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">EnableConfigurationProperties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">KitProperties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> KitAutoConfiguration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Bean</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MybatisPlusInterceptor </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mybatisPlusInterceptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        MybatisPlusInterceptor</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> interceptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MybatisPlusInterceptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 添加分页插件（你可以支持多数据库）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        interceptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addInnerInterceptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> PaginationInnerInterceptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">DbType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MYSQL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> interceptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Bean</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">ConditionalOnMissingBean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ResponseWrapperAdvice</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">ConditionalOnProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">prefix</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">mybatis-plus-kit</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">response-wrapper-enabled</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> havingValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> matchIfMissing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ResponseWrapperAdvice </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">responseWrapperAdvice</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">KitProperties </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">properties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ResponseWrapperAdvice</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">properties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">github</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">l4vid4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">starter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">conf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">ConfigurationProperties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">prefix</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">mybatis-plus-kit</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Data</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Getter</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> KitProperties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 是否启用统一响应封装（默认启用）</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> boolean</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> responseWrapperEnabled</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>需要在 <code>resources/META-INF/spring.factories</code> 中声明（sping3以下）：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">io.github.l4vid4.starter.KitAutoConfiguration</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>Spring3+需要在<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.import</code>中声明：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">github</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">l4vid4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">starter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">KitAutoConfiguration</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>Spring Boot 启动时会自动扫描 <code>spring.factories</code> 里的配置，加载你的自动配置类。</p></li><li><p>将starter发布到maven仓库</p></li></ol><h3 id="springboot的过滤器和拦截器" tabindex="-1"><a class="header-anchor" href="#springboot的过滤器和拦截器"><span>SpringBoot的过滤器和拦截器</span></a></h3><p>在Spring Boot中，过滤器和拦截器是用来处理请求和响应的两种不同机制</p><table><thead><tr><th>特性</th><th>Filter（过滤器）</th><th>Interceptor（拦截器）</th></tr></thead><tbody><tr><td>所属规范</td><td>Servlet 规范</td><td>Spring MVC</td></tr><tr><td>作用范围</td><td>所有请求，包括静态资源</td><td>仅 Spring MVC 控制器请求</td></tr><tr><td>拦截阶段</td><td>请求到达 Servlet 前后</td><td>请求到达 Controller 前后，视图渲染前后</td></tr><tr><td>触发时机</td><td><code>doFilter()</code>在请求前/响应后被调用</td><td><code>preHandler、postHandler、afterCompletion</code>分阶段触发</td></tr><tr><td>配置方式</td><td>注册 <code>Filter</code> Bean，或 <code>FilterRegistrationBean</code></td><td>实现 <code>HandlerInterceptor</code>，配置 <code>WebMvcConfigurer</code></td></tr><tr><td>使用场景</td><td>日志、编码、权限、跨域处理等通用功能</td><td>认证鉴权、业务逻辑处理、记录用户操作等</td></tr></tbody></table><ul><li>过滤器是Java Servlet规范中的一部分，它可以对进入Servlet容器的请求和响应进行预处理和后处理。过滤器通过实现<code>javax.servlet.Filter</code>接口，并重写其中的<code>init、doFilter</code>和<code>destroy</code>方法来完成相应的逻辑。当请求进入Servlet容器时，会按照配置的顺序依次经过各个过滤器，然后再到达目标Servlet或控制器；响应返回时，也会按照相反的顺序再次经过这些过滤器。</li><li>拦截器是Spring框架提供的一种机制，它可以对控制器方法的执行进行拦截。拦截器通过实现<code>org.springFramework.web.servlet.HandlerInterceptor</code>接口，并重写其中的<code>preHandle、PostHandle</code>和<code>afterCompletion</code>方法来完成相应的逻辑。当请求到达控制器时，会先经过拦截器的<code>preHandle</code>方法，如果该方法返回<code>true</code>，则继续执行后续的控制器方法和其他拦截器；在控制器方法执行完成后，会调用拦截器的<code>postHandle</code>方法；最后，在请求处理完成后，会调用拦截器的<code>afterCompletion</code>方法。</li></ul><h3 id="springboot常见注解有哪些" tabindex="-1"><a class="header-anchor" href="#springboot常见注解有哪些"><span>SpringBoot常见注解有哪些？</span></a></h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@SpringBootApplication</code></td><td>启动入口注解，包含 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code></td></tr><tr><td><code>@SpringBootConfiguration</code></td><td>标注 Spring Boot 配置类，本质是 <code>@Configuration</code>，被 <code>@SpringBootApplication</code> 包含</td></tr><tr><td><code>@EnableAutoConfiguration</code></td><td>开启自动配置（被 <code>@SpringBootApplication</code> 包含）</td></tr><tr><td><code>@ConfigurationProperties</code></td><td>将配置文件中的属性绑定到 Java Bean 上</td></tr><tr><td><code>@EnableConfigurationProperties</code></td><td>开启 <code>@ConfigurationProperties</code> 注解生效</td></tr><tr><td><code>@ConditionalOnClass</code></td><td>某个类存在时自动配置生效</td></tr><tr><td><code>@ConditionalOnMissingBean</code></td><td>当容器中不存在指定 Bean 时进行自动配置</td></tr><tr><td><code>@ConditionalOnProperty</code></td><td>当指定配置属性存在且满足条件时生效</td></tr><tr><td><code>@ConditionalOnBean</code></td><td>当容器中存在某个 Bean 时生效</td></tr><tr><td><code>@ConditionalOnMissingClass</code></td><td>某个类不存在时自动配置生效</td></tr><tr><td><code>@ConditionalOnWebApplication</code></td><td>Web 应用环境下自动配置生效</td></tr><tr><td><code>@ConditionalOnNotWebApplication</code></td><td>非 Web 应用环境下自动配置生效</td></tr><tr><td><code>@SpringBootTest</code></td><td>用于测试类，启动完整的 Spring Boot 应用上下文</td></tr><tr><td><code>@TestConfiguration</code></td><td>专门为测试提供的配置类</td></tr><tr><td><code>@DataJpaTest</code></td><td>测试 JPA 相关组件（Repository 层）</td></tr><tr><td><code>@WebMvcTest</code></td><td>测试 MVC Controller 层</td></tr><tr><td><code>@MockBean</code></td><td>在测试中 Mock 某个 Bean</td></tr><tr><td><code>@EnableScheduling</code></td><td>启用定时任务调度功能</td></tr><tr><td><code>@EnableAsync</code></td><td>启用异步方法执行</td></tr></tbody></table><h2 id="springmvc" tabindex="-1"><a class="header-anchor" href="#springmvc"><span>SpringMVC</span></a></h2><h3 id="springmvc的执行流程" tabindex="-1"><a class="header-anchor" href="#springmvc的执行流程"><span>SpringMVC的执行流程</span></a></h3><h4 id="视图阶段-jsp" tabindex="-1"><a class="header-anchor" href="#视图阶段-jsp"><span>视图阶段（JSP）</span></a></h4><ol><li>用户发送请求到前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求调用HandlerMapping（处理器映射器）</li><li>HandlerMapping找到具体的处理器，生成处理器对象及处理器拦截器（如果有），再一起返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter（处理器适配器）</li><li>HandlerAdapter经过适配调用具体的处理器（Handler/Controller）</li><li>Controller执行完成返回ModelAndView对象</li><li>HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet</li><li>DispatcherServlet将ModelAndView传给ViewReslover（视图解析器）</li><li>ViewReslover解析后返回具体的View（视图）</li><li>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）</li><li>Dispatcher响应用户</li></ol><p><img src="`+d+'" alt="image-20250609171623274"></p><h4 id="前后端分离阶段-接口开发-异步请求" tabindex="-1"><a class="header-anchor" href="#前后端分离阶段-接口开发-异步请求"><span>前后端分离阶段（接口开发，异步请求）</span></a></h4><ol><li>用户发送请求到前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求调用HandlerMapping（处理器映射器）</li><li>HandlerMapping找到具体的处理器，生成处理器对象及处理器拦截器（如果有），再一起返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter（处理器适配器）</li><li>HandlerAdapter经过适配调用具体的处理器（Handler/Controller）</li><li>方法上添加了@ResponseBody</li><li>通过HttpMessageConverter来将返回结果转换为JSON并响应</li></ol><p><img src="'+p+'" alt="image-20250609171823279"></p><h3 id="springmvc的常见注解有哪些" tabindex="-1"><a class="header-anchor" href="#springmvc的常见注解有哪些"><span>SpringMVC的常见注解有哪些</span></a></h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@RequestMapping</code></td><td>映射请求路径到 Controller 方法，可指定 GET、POST 等</td></tr><tr><td><code>@RequestBody</code></td><td>将请求体中的 JSON/XML 数据绑定到方法参数上，将Json转换为Java对象</td></tr><tr><td><code>@RequestParam</code></td><td>将请求参数绑定到方法参数上，通常用于 URL 参数</td></tr><tr><td><code>@PathVariable</code></td><td>将 URL 路径中的占位符绑定到方法参数上（/user/{id}）</td></tr><tr><td><code>@ResponseBody</code></td><td>将方法返回值直接写入 HTTP 响应体，通常用于返回 JSON</td></tr><tr><td><code>@RequestHeader</code></td><td>将请求头中的值绑定到方法参数上</td></tr><tr><td><code>@RestController</code></td><td>组合注解，等于 <code>@Controller + @ResponseBody</code>，用于 RESTful API</td></tr></tbody></table><h2 id="springcloud" tabindex="-1"><a class="header-anchor" href="#springcloud"><span>SpringCloud</span></a></h2><h3 id="springcloud和springboot的区别" tabindex="-1"><a class="header-anchor" href="#springcloud和springboot的区别"><span>SpringCloud和SpringBoot的区别</span></a></h3><ul><li>SpringBoot是用于构建单个Spring应用的框架，而SpringCloud则是用于构建分布式系统中的微服务架构的工具，Spring Cloud提供了服务注册与发现、负载均衡、断路器、网关等功能。</li><li>两者可以结合使用，通过Spring Boot构建微服务应用，然后用Spring Cloud来实现微服务架构中的各种功能。</li></ul><h3 id="微服务常用的组件" tabindex="-1"><a class="header-anchor" href="#微服务常用的组件"><span>微服务常用的组件</span></a></h3><p><img src="'+k+'" alt="img"></p><ul><li><strong>注册中心：<strong>注册中心是微服务架构最核心的组件。它起到的作用是对新节点的注册与状态维护，解决了</strong>如何发现新节点以及检查各节点的运行状态的问题</strong>。微服务节点在启动时会将自己的服务名称、IP、端口等信息在注册中心登记，注册中心会定时检查该节点的运行状态。注册中心通常会采用心跳机制最大程度保证已登记过的服务节点都是可用的。</li><li><strong>负载均衡：<strong>负载均衡解决了</strong>如何发现服务及负载均衡如何实现的问题</strong>，通常微服务在互相调用时，并不是直接通过IP、端口进行访问调用。而是先通过服务名在注册中心查询该服务拥有哪些节点，注册中心将该服务可用节点列表返回给服务调用者，这个过程叫服务发现，因服务高可用的要求，服务调用者会接收到多个节点，必须要从中进行选择。因此服务调用者一端必须内置负载均衡器，通过负载均衡策略选择合适的节点发起实质性的通信请求。</li><li><strong>服务通信：<strong>服务通信组件解决了</strong>服务间如何进行消息通信的问题</strong>，服务间通信采用轻量级协议，通常时HTTP RESTful风格。但因为RESTful风格过于灵活，必须加以约束，通常应用时对其封装。例如在SpingCloud中就提供了Feign和RestTemplate两种技术屏蔽底层的实现细节，所有开发者都是基于封装后统一的SDK进行开发，有利于团队间的相互合作。</li><li><strong>配置中心：<strong>配置中心主要解决了</strong>如何集中管理各节点配置文件的问题</strong>，在微服务架构下，所有的微服务节点都包含自己的各种配置文件，如jdbc配置、自定义配置、环境配置、运行参数配置等。要知道有的微服务可能有几十个节点，如果将这些配置文件分散存储在节点上，发生配置更改就需要逐个节点调整，将给运维人员带来巨大的压力。配置中心便由此而生，通过部署配置中心服务器，将各节点配置文件从服务中剥离，集中转存到配置中心。一般配置中心都有UI界面，方便实现大规模集群配置调整。</li><li><strong>集中式日志管理：<strong>集中式日志主要解决了</strong>如何收集各节点日志并统一管理的问题</strong>。微服务架构默认将应用日志分别保存在部署节点上，当需要对日志数据和操作数据进行数据分析和数据统计时，必须收集所有节点的日志数据。那么怎么高效收集所有节点的日志数据呢？业内常见的方案有ELF、EFK。通过搭建独立的日志收集系统，定时抓取各节点增量日志形成有效的统计报表，为统计和分析提供数据支撑。</li><li><strong>分布式链路追踪：<strong>分布式链路解决了</strong>如何直观的了解各节点间的调用链路的问题</strong>。系统中一个复杂的业务流程，可能会出现连续调用多个微服务，我们需要了解完整的业务逻辑涉及的每个微服务的运行状态，通过可视化链路图展现，可以帮助开发人员快速分析系统瓶颈及出错的服务。</li><li><strong>服务保护：<strong>服务保护主要是解决了</strong>如何对系统进行链路保护，避免服务雪崩的问题</strong>。在业务运行时，微服务间互相调用支撑，如果某个微服务出现高延迟导致线程池满载，或是业务处理失败。这里就需要引入服务保护组件来实现高延迟服务的快速降级，避免系统崩溃。</li></ul><h3 id="springcloud-alibaba实现的微服务结构" tabindex="-1"><a class="header-anchor" href="#springcloud-alibaba实现的微服务结构"><span>SpringCloud Alibaba实现的微服务结构</span></a></h3><p><img src="'+o+`" alt="img"></p><ul><li><p>SpringCloud Alibaba 中使用 <strong>Alibaba Nacos</strong> 组件实现 <strong>注册中心</strong>，Nacos 提供了一组简单易用的特性集，可快速实现动态服务发现、服务配置、服务元数据及流量管理。</p></li><li><p>SpringCloud Alibaba 使用 <strong>Nacos 服务均衡</strong> 实现负载均衡，区别于 Ribbon 是在调用端负载，Nacos 是在服务发现时即负载均衡。</p></li><li><p>SpringCloud Alibaba 使用 <strong>Netflix Feign</strong> 和 <strong>Alibaba Dubbo</strong> 组件实现服务通信，Feign 是基于 HTTP，Dubbo 是基于 RPC。</p></li><li><p>SpringCloud Alibaba 在 <strong>API 网关</strong> 使用 <strong>Spring Cloud Gateway</strong>。</p></li><li><p>SpringCloud Alibaba 配置中心使用 <strong>Nacos 内置配置中心</strong>，可将配置信息存储在指定数据库中。</p></li><li><p>SpringCloud Alibaba 支持阿里云 <strong>日志服务（LOG）</strong> 实现日志集中管理。</p></li><li><p>SpringCloud Alibaba 支持 <strong>分布式链路追踪</strong>，可选 <strong>Sleuth/Zipkin Server</strong>。</p></li><li><p>SpringCloud Alibaba 使用 <strong>Alibaba Sentinel</strong> 实现系统保护，比 Hystrix 更优雅、功能更强大。</p></li></ul><h3 id="负载均衡有哪些算法" tabindex="-1"><a class="header-anchor" href="#负载均衡有哪些算法"><span>负载均衡有哪些算法</span></a></h3><ul><li>简单轮询：将请求按顺序分发给后端服务器上，不关心服务器当前的状态，比如后端服务器的性能、当前的负载。</li><li>加权轮询：根据服务器自身的性能给服务器设置不同的权重，将请求按顺序和权重分发给后端服务器，可以让性能高的机器处理更多的请求。</li><li>简单随机：将请求随机分发到后端服务器上，请求越多，各个服务器接收到的请求越平均。</li><li>加权随机：根据服务器自身的性能给服务器设置不同的权重，将请求按各个服务器的权重随即分发给后端服务器。</li><li>一致性哈希：根据请求的客户端ip、或请求参数通过哈希算法得到一个数值，利用该数值取模映射出对应的后端服务器，这样能保证同一个客户端或相同参数的请求每次都使用同一台服务器。</li><li>最小活跃数：统计每台服务器上当前正在处理的请求数，也就是请求活跃数，将请求分发给活跃数最少的后台服务器。</li></ul><h3 id="介绍一下服务熔断" tabindex="-1"><a class="header-anchor" href="#介绍一下服务熔断"><span>介绍一下服务熔断</span></a></h3><p>服务熔断是应对微服务雪崩效应的一种链路保护机制，类似保险丝。</p><p>当某个服务出现故障（如响应超时、错误率升高）时，<strong>主动中断对该服务的调用</strong>，避免大量请求继续压垮服务，影响整个系统。</p><h4 id="主要概念" tabindex="-1"><a class="header-anchor" href="#主要概念"><span>主要概念</span></a></h4><ul><li><strong>熔断器</strong>（Circuit Breaker）：像电路的保险丝，触发后“断开”调用链。</li><li><strong>三种状态</strong>： <ol><li><strong>闭合（Closed）</strong>：正常调用，监控失败率。</li><li><strong>打开（Open）</strong>：熔断状态，直接失败，快速返回，保护服务。</li><li><strong>半开（Half-Open）</strong>：试探恢复，部分请求允许通过，成功则关闭熔断器，失败继续打开。</li></ol></li></ul><h4 id="触发条件" tabindex="-1"><a class="header-anchor" href="#触发条件"><span>触发条件</span></a></h4><ul><li>请求失败率超过阈值</li><li>响应时间过长</li><li>异常量过大</li></ul><h3 id="介绍一下服务降级" tabindex="-1"><a class="header-anchor" href="#介绍一下服务降级"><span>介绍一下服务降级</span></a></h3><p>服务降级一般是指在服务器压力剧增的时候，根据实际业务使用情况以及流量，对一些服务和页面有策略的不处理或者用一种简单的方式处理，从而<strong>释放服务器资源以保证核心业务的正常高效运行</strong>。</p><p>服务降级是从整个系统的负荷情况出发和考虑的，对某些负荷比较高的情况，为了预防某些功能（业务场景）出现符合过载或者响应慢的情况，在其内部暂时舍弃对一些非核心的接口和数据的请求，而直接返回一个提前准备好的fallback（退路）错误处理信息。这样，虽然提供的是一个有损的服务，但却保证了整个系统的稳定性和可用性。</p><table><thead><tr><th>场景</th><th>降级策略</th></tr></thead><tbody><tr><td>推荐系统不可用</td><td>返回缓存推荐</td></tr><tr><td>某服务调用超时</td><td>返回默认值、缓存数据、提示稍后再试</td></tr><tr><td>订单服务超时</td><td>提示用户稍后再试</td></tr><tr><td>非核心服务压力大</td><td>暂时关闭该服务</td></tr><tr><td>大促期间高并发</td><td>关闭部分耗资源的统计/监控功能</td></tr></tbody></table><h3 id="服务熔断和服务降级的区别" tabindex="-1"><a class="header-anchor" href="#服务熔断和服务降级的区别"><span>服务熔断和服务降级的区别</span></a></h3><table><thead><tr><th>对比项</th><th>服务熔断</th><th>服务降级</th></tr></thead><tbody><tr><td>定义</td><td>自动<strong>中断调用</strong>，防止连锁故障扩散</td><td>主动<strong>降低服务质量</strong>，保证核心可用</td></tr><tr><td>触发条件</td><td>故障率高、超时多、异常量大</td><td>服务不可用、高并发、资源不足</td></tr><tr><td>行为</td><td>直接拒绝请求，快速失败</td><td>返回默认值、缓存、简化逻辑</td></tr><tr><td>作用对象</td><td>主要针对<strong>调用链中的下游服务</strong></td><td>针对<strong>本地服务或全链路服务</strong></td></tr><tr><td>是否主动控制</td><td>否（框架监控后自动熔断）</td><td>是（开发者主动配置）</td></tr><tr><td>恢复方式</td><td>半开状态自动探测后恢复</td><td>手动/自动恢复</td></tr><tr><td>场景</td><td>防止雪崩、保护依赖服务</td><td>高峰限流、功能降级、提升可用性</td></tr></tbody></table><h2 id="springai" tabindex="-1"><a class="header-anchor" href="#springai"><span>SpringAI</span></a></h2><h3 id="什么是springai" tabindex="-1"><a class="header-anchor" href="#什么是springai"><span>什么是SpringAI</span></a></h3><p>Spring AI 是 <strong>Spring 官方推出的 AI 集成框架</strong>，用于简化将 AI 服务（如 OpenAI、Azure OpenAI、Anthropic、HuggingFace 等）集成到 Spring 应用中，具备：</p><ul><li>简化 API 调用</li><li>支持 Prompt 工程</li><li>支持 RAG（检索增强生成）</li><li>支持向量数据库集成（如 Pinecone、Milvus 等）</li><li>易于与 Spring Boot、Spring Cloud 生态整合</li></ul><h3 id="什么是-rag-spring-ai-如何实现" tabindex="-1"><a class="header-anchor" href="#什么是-rag-spring-ai-如何实现"><span>什么是 RAG？Spring AI 如何实现？</span></a></h3><ul><li><p><strong>RAG</strong>（Retrieval-Augmented Generation，检索增强生成）是一种将外部知识与大模型结合的技术，提升回答质量。</p></li><li><p>Spring AI 支持通过 VectorStore 配合 ChatClient 实现 RAG：</p></li></ul><ol><li>查询 VectorStore → 找到相关文档</li><li>拼接到 Prompt 里 → 提交给 LLM</li><li>返回生成结果</li></ol><h3 id="springai向量数据库" tabindex="-1"><a class="header-anchor" href="#springai向量数据库"><span>SpringAI向量数据库</span></a></h3><p><strong>Spring AI 的向量数据库（Vector Store）功能</strong>，是用来支持 <strong>RAG（检索增强生成）</strong> 场景的。 它将文本、文档等内容转成 <strong>向量（Embedding）</strong>，存入向量数据库，后续可以通过相似度检索相关内容，增强 LLM 的回答效果。</p><h4 id="使用流程" tabindex="-1"><a class="header-anchor" href="#使用流程"><span>使用流程：</span></a></h4><ol><li><p><strong>生成向量</strong> 调用 LLM/Embedding API 将文本转成向量。</p></li><li><p><strong>存储向量</strong> 通过 <code>vectorStore.add(doc)</code> 存入数据库。</p></li><li><p><strong>相似度检索</strong> 用当前用户问题转成向量，做 <code>similaritySearch</code> 检索。</p></li><li><p><strong>拼接上下文到 Prompt</strong> 将检索到的相关内容拼 Prompt 提交给 LLM，提升答案准确性。</p></li></ol><h3 id="springai会话记忆功能" tabindex="-1"><a class="header-anchor" href="#springai会话记忆功能"><span>SpringAI会话记忆功能</span></a></h3><p><strong>Spring AI 的会话记忆功能</strong>，是指在多轮对话场景中，<strong>自动保存对话历史上下文</strong>，让大模型（LLM）能够理解前后语境，做出更连贯的回答。</p><p>Spring AI 提供了 <code>MemoryChatClient</code>，在调用时会自动将之前的对话历史拼接到 Prompt 里发送给模型，开发者无需手动管理上下文。</p><p>常见的 Memory 存储实现包括：</p><ul><li><code>InMemoryChatMemory</code>（内存型，适合单机调试）</li><li><code>RedisChatMemory</code>（支持跨服务/分布式场景）</li><li>自定义 <code>ChatMemory</code> 接口实现（如数据库）</li></ul><h3 id="springai的prompttemplate" tabindex="-1"><a class="header-anchor" href="#springai的prompttemplate"><span>SpringAI的PromptTemplate</span></a></h3><p>通过 PromptTemplate 可以动态构建 Prompt，支持参数化，提升 Prompt 工程的可复用性和可维护性。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PromptTemplate</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> PromptTemplate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">请介绍一下{topic}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Prompt</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> prompt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">create</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">of</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">topic</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Spring AI</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,149)]))}const b=s(g,[["render",c]]),A=JSON.parse('{"path":"/studyNotes/lbj4rl39/","title":"面试题-Spring","lang":"zh-CN","frontmatter":{"title":"面试题-Spring","createTime":"2025/07/03 02:39:45","permalink":"/studyNotes/lbj4rl39/"},"readingTime":{"minutes":28.06,"words":8418},"git":{"updatedTime":1751509922000,"contributors":[{"name":"Lang","username":"Lang","email":"914551901@qq.com","commits":3,"avatar":"https://avatars.githubusercontent.com/Lang?v=4","url":"https://github.com/Lang"}]},"filePathRelative":"notes/学习笔记/八股文/面试题-Spring.md","headers":[]}');export{b as comp,A as data};
