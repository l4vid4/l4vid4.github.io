import{_ as i,c as a,a as n,o as l}from"./app-dsZ4C4U9.js";const t={};function e(h,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="启动命令" tabindex="-1"><a class="header-anchor" href="#启动命令"><span>启动命令</span></a></h2><ul><li>systemctl start docker 启动docker</li><li>systemctl stop docker 停止docker</li><li>systemctl enable docker 开机自启docker</li></ul><h2 id="docker镜像加速配置" tabindex="-1"><a class="header-anchor" href="#docker镜像加速配置"><span>Docker镜像加速配置</span></a></h2><ul><li><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener noreferrer">阿里云镜像加速</a></li></ul><h2 id="部署mysql" tabindex="-1"><a class="header-anchor" href="#部署mysql"><span>部署MySQL</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\	</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	#命令起始，run代表运行，-d是让容器在后台运行</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	--name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\ </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #为容器起一个名字</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	-p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 3306:3306</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\ </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    #-p设置端口映射（前面是宿主机端口，后者是容器内端口）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	-e</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TZ=Asia/Shanghai</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\	</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">#-e设置环境变量</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	-e</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MYSQL_ROOT_PASSWORD=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">123</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">	mysql</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	#运行的镜像的名字（完整是repository:tag，tag是版本）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="镜像和容器" tabindex="-1"><a class="header-anchor" href="#镜像和容器"><span>镜像和容器</span></a></h2><ul><li>当我们利用Docker安装应用时，Docker会自动搜索并下载应用镜像（image）。镜像不仅包含应用本身，还包含应用运行时所需要的环境、配置、系统函数库。Docker会在运行镜像时创建一个隔离环境，成为容器（container）。</li><li>全球Docker仓库：<a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">Docker Hub</a></li></ul><h2 id="常见命令" tabindex="-1"><a class="header-anchor" href="#常见命令"><span>常见命令</span></a></h2><blockquote><p><a href="docs.docker.com/reference">官方文档</a></p></blockquote><p><img src="https://raw.githubusercontent.com/lrffun/ImageStorage/main/img/image-20240229210250629.png" alt="image-20240229210250629"></p><ul><li><p>docker pull 拉取镜像</p></li><li><p>docker images 查看本地镜像</p></li><li><p>docker rmi 删除镜像</p></li><li><p>docekr build 构建镜像</p></li><li><p>docker save 保存镜像</p></li><li><p>docker load 加载镜像</p></li><li><p>docker push 推镜像</p></li><li><p>docker run <strong>创建</strong>并启动镜像（docker run -d -p 80:80 --name mynginx nginx）</p></li><li><p>docker stop停止镜像</p></li><li><p>docker start 重新启动原来的容器</p></li><li><p>docker rm 删除容器</p></li><li><p>docker logs 查看容器日志，docker logs -f 持续查看日志</p></li><li><p>docker exec 进入容器内部</p><blockquote><p>-it bash 可交互终端（docker exec -it nginx bash）（docker exec -it mysql <strong>mysql -uroot -p</strong>）高亮代表执行的命令</p></blockquote></li></ul><h2 id="linux命令重命名" tabindex="-1"><a class="header-anchor" href="#linux命令重命名"><span>Linux命令重命名</span></a></h2><ol><li><p>编辑vi ~/.bashrc</p></li><li><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># .bashrc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># User specific aliases and functions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">alias</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> rm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rm -i</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">alias</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> cp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">cp -i</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">alias</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">mv -i</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">alias</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> dps</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">docker ps --format &quot;table {{.ID}}\\t{{.Image}}\\t{{.Ports}}\\t{{.Status}}\\t{{.Names}}&quot;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># Source global definitions</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -f</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /etc/bashrc </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> then</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        .</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/bashrc</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>更新source ~/.bashrc</p></li></ol><h2 id="数据卷" tabindex="-1"><a class="header-anchor" href="#数据卷"><span>数据卷</span></a></h2><ul><li><p>数据卷是一个虚拟目录，是容器内目录与宿主机目录之间映射的栋梁。</p><p><img src="https://raw.githubusercontent.com/lrffun/ImageStorage/main/img/image-20240309220615890.png" alt="image-20240309220615890"></p></li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker volume create</td><td>创建数据卷</td></tr><tr><td>docker volume ls</td><td>查看所有数据卷</td></tr><tr><td>docker volume rm</td><td>删除指定数据卷</td></tr><tr><td>docker volume inspect</td><td>查看某个数据卷的详情</td></tr><tr><td>docker volume prune</td><td>清除数据卷</td></tr><tr><td>docker volume --help</td><td>查看所有命令信息</td></tr></tbody></table><ul><li><p>在执行docker run命令时，使用**-v 数据卷:容器内目录**可以完成数据卷挂载</p><blockquote><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p8080:80</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> html:/usr/share/nginx/html</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote></li><li><p>在执行docker run命令时，使用**-v 本地目录:容器内目录可以完成本地目录挂载（目录必须以/或./开头）</p><blockquote><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	--name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	-p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 3306:3306</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	-e</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TZ=Asia/Shanghai</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	-e</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MYSQL_ROOT_PASSWORD=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">123</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	-v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /root/docker/mysql/data:/var/lib/mysql</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	-v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /root/docker/mysql/init:/docker-entrypoint-initdb.d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	-v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /root/docker/mysql/conf:/etc/mysql/conf.d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">	mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p>当创建容器时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷</p></li><li><p>mysql容器创建时如果不指定会自动生成匿名卷</p></li></ul><h2 id="自定义镜像" tabindex="-1"><a class="header-anchor" href="#自定义镜像"><span>自定义镜像</span></a></h2><ul><li>自定义镜像包括<strong>入口、层和基础镜像</strong></li></ul><h3 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile</span></a></h3><ul><li><p>Dockerfile就是一个文本文件，其中包含一个个的指令，用什么指令来说明要执行什么操作来构建镜像。将来Docker可以根据Dockerfile帮我们构建镜像。常见指令如下：</p><table><thead><tr><th>指令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td><td>FROM centos:6</td></tr><tr><td>ENV</td><td>设置环境变量，可在后面指令使用</td><td>ENV key value</td></tr><tr><td>COPY</td><td>拷贝本地文件到镜像的指定目录</td><td>COPY ./jrell.tar.gz /tmp</td></tr><tr><td>RUN</td><td>执行Linux的shel命令，一般时安装过程的命令</td><td>RUN tar -zxvf /tmp/jrell.tar.gz &amp;&amp; EXPORTS path=/tmp/jrell:$path</td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td>EXPOSE 8080</td></tr><tr><td>ENTRYPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td><td>ENTRYPOINT java -jar xx.jar</td></tr></tbody></table></li><li><p>更多指令参考<a href="https://docs.docker.com/engine/reference/builder" target="_blank" rel="noopener noreferrer">官方文档</a></p></li><li><p>我们可以基于Ubuntu基础镜像，利用Dockerfile描述镜像结构</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 指定基础镜像</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">FROM</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ubuntu:16.04</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 配置环境变量，JDK的安装目录、容器内时区</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENV</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> JAVA_DIR=/usr/local</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 拷贝jdk和java项目的包</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">COPY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./jdk8.tar.gz</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $JAVA_DIR</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">COPY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./docekr-demo.jar</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /tmp/app.jar</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 安装JDK</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cd</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $JAVA_DIR</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\ </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> tar</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -xf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./jdk8.tar.gz</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\ </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./jdk1.8.0_144</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./java8</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#配置环境变量</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENV</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> JAVA_HOME=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$JAVA_DIR</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/java8</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENV</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> PATH=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$PATH</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$JAVA_HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/bin</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 入口，java项目的启动命令</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENTRYPOINT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-jar</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/app.jar</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我们也可以直接基于JDK为基础镜像，省略前面的步骤</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 基础镜像</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">FROM</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> openjdk:11.0-jre-buster</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 拷贝jar包</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">COPY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker-demo.jar</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /app.jar</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 入口</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENTRYPOINT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-jar</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/app.jar</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当编写好Dockerfile，可以利用下面命令来构建镜像：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myImage:1.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>-t：是给镜像起名，格式依然是repository:tag的格式，不指定tag时，默认为latest</p><p>.：是指定Dockerfile所在目录，如果就在当前目录，则指定为&quot;.&quot;</p></blockquote></li></ul><h2 id="网络" tabindex="-1"><a class="header-anchor" href="#网络"><span>网络</span></a></h2><ul><li><p>默认情况下，所有容器都是以bridge方式连接到Docker的一个虚拟网桥上</p><p><img src="https://raw.githubusercontent.com/lrffun/ImageStorage/main/img/image-20240311225141847.png" alt="image-20240311225141847"></p></li></ul><h3 id="自定义网桥" tabindex="-1"><a class="header-anchor" href="#自定义网桥"><span>自定义网桥</span></a></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker network create</td><td>创建一个网络</td></tr><tr><td>docker network ls</td><td>查看所有网络</td></tr><tr><td>docker network rm</td><td>删除指定网络</td></tr><tr><td>docker network prune</td><td>清除未使用的网络</td></tr><tr><td>docker network connect</td><td>使指定容器连接加入某网络</td></tr><tr><td>docker network disconnect</td><td>使指定容器连接离开某网络</td></tr><tr><td>docker network inspect</td><td>查看网络详细信息</td></tr></tbody></table><h2 id="docker部署前端" tabindex="-1"><a class="header-anchor" href="#docker部署前端"><span>Docker部署前端</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	--name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	-p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 80:80</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	-p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 81:81</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	-v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /root/nginx/html:/usr/share/nginx/html</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	-v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /root/nginx/nginx.conf:/etc/nginx/nginx.conf</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	--network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fresh</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">	nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="dockercompose" tabindex="-1"><a class="header-anchor" href="#dockercompose"><span>DockerCompose</span></a></h1><ul><li>Docker Compose通过一个单独的docker-compose.yml模板文件（YAML格式）来定义一组相关联的应用容器，帮助我们实现多个相互关联的Docker容器的快速部署。</li></ul><p><img src="https://raw.githubusercontent.com/lrffun/ImageStorage/main/img/image-20240329165525093.png" alt="image-20240329165525093"></p><ul><li>docker-compose.yml</li></ul><p><img src="https://raw.githubusercontent.com/lrffun/ImageStorage/main/img/image-20240407095934220.png" alt="image-20240407095934220"></p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1.0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">services</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">	mysql</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		image</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		container_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		ports</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">3306:3306</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		environment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">			TZ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">			MYSQL_ROOT_PASSWORD</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 123</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		volumes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./mysql/conf:/etc/mysql/conf.d</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./mysql/data:/var/lib/mysql</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./mysql/init:/docker-entrypoint-initdb.d</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		networks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">	hmall</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">			context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> .</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">			dockerfile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		container_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hmall</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		ports</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">8080:8080</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		networks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hm-net</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		depends_on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #先创建依赖</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">	nginx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		image</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		container_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		ports</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">18080:18080</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">18081:18081</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		volumes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./nginx/nginx.conf:/etc/nginx/nginx.conf</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./nginx/html:/usr/share/nginx/html</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		depends_on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hmall</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		networks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">			-</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hm-net</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">	networks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		hm-net</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">			name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hmall</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>DockerCompose的命令</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-f</td><td>指定compose文件的路径和名称</td></tr><tr><td>-p</td><td>指定project名称</td></tr><tr><td>-d</td><td>后台运行</td></tr><tr><td>up</td><td>创建并启动所有service容器</td></tr><tr><td>down</td><td>停止并移除所有容器、网络</td></tr><tr><td>ps</td><td>列出所有启动的容器</td></tr><tr><td>logs</td><td>查看指定容器的日志</td></tr><tr><td>stop</td><td>停止容器</td></tr><tr><td>start</td><td>启动容器</td></tr><tr><td>restart</td><td>重启容器</td></tr><tr><td>top</td><td>查看运行的进程</td></tr><tr><td>exec</td><td>在指定的运行中容器中执行命令</td></tr></tbody></table>`,36)]))}const p=i(t,[["render",e]]),d=JSON.parse('{"path":"/studyNotes/lzi9mcpj/","title":"docker","lang":"zh-CN","frontmatter":{"title":"docker","createTime":"2025/04/24 18:35:24","permalink":"/studyNotes/lzi9mcpj/"},"readingTime":{"minutes":5.14,"words":1542},"git":{"updatedTime":1745747081000,"contributors":[{"name":"Lang","username":"Lang","email":"914551901@qq.com","commits":3,"avatar":"https://avatars.githubusercontent.com/Lang?v=4","url":"https://github.com/Lang"}]},"filePathRelative":"notes/学习笔记/Docker/docker.md","headers":[]}');export{p as comp,d as data};
