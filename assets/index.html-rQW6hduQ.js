import{_ as d,c as e,a,o as r}from"./app-dsZ4C4U9.js";const n={};function i(o,t){return r(),e("div",null,t[0]||(t[0]=[a('<h2 id="限流算法" tabindex="-1"><a class="header-anchor" href="#限流算法"><span>限流算法</span></a></h2><table><thead><tr><th>限流算法</th><th>工作原理</th><th>适用场景</th><th>优缺点</th></tr></thead><tbody><tr><td>计数器（Counter）</td><td>设定固定时间窗口，计数请求数，超过阈值则拒绝</td><td>简单的固定时间窗口限流</td><td>✅ 实现简单，开销小 ❌ 突发流量可能导致短时间超载</td></tr><tr><td>滑动窗口（Sliding Window）</td><td>以滑动窗口方式统计请求数，更平滑地进行限流</td><td>适用于流量平稳的系统</td><td>✅ 改进计数器算法，避免短时突发 ❌ 仍然可能在窗口边界发生突发流量</td></tr><tr><td>漏桶（Leaky Bucket）</td><td>请求以固定速率流出，超出速率的请求丢弃或排队</td><td>网络请求、流量整形</td><td>✅ 平滑限流，防止突发 ❌ 可能导致请求被丢弃</td></tr><tr><td>令牌桶（Token Bucket）</td><td>令牌按固定速率生成，请求消耗令牌才能通过</td><td>API 限流、分布式服务</td><td>✅ 允许一定程度的突发流量 ❌ 令牌生成速率需调优</td></tr><tr><td>一致性哈希（Consistent Hashing）</td><td>通过哈希分片限制流量，确保流量分布均衡</td><td>分布式限流</td><td>✅ 适用于分布式限流 ❌ 需要合理的哈希算法设计</td></tr><tr><td>Redis+滑动窗口</td><td>使用 Redis 实现滑动窗口限流，通过 <code>ZSET</code> 记录时间戳</td><td>高并发请求限流</td><td>✅ 分布式可用，性能好 ❌ 依赖 Redis，需维护额外存储</td></tr><tr><td>Nginx 限流（ngx_http_limit_req_module）</td><td>Nginx 提供的限流模块，基于漏桶算法</td><td>Web 服务器请求限流</td><td>✅ 易于部署，性能优越 ❌ 需结合应用层策略优化</td></tr><tr><td>Guava RateLimiter</td><td>Google Guava 库提供的基于令牌桶的限流工具</td><td>Java 应用内部限流</td><td>✅ 易集成，适用于单机限流 ❌ 适用于单机，分布式需额外处理</td></tr></tbody></table>',2)]))}const c=d(n,[["render",i]]),m=JSON.parse('{"path":"/studyNotes/yrm1by7l/","title":"算法","lang":"zh-CN","frontmatter":{"title":"算法","createTime":"2025/04/24 18:35:26","permalink":"/studyNotes/yrm1by7l/"},"readingTime":{"minutes":1.47,"words":440},"git":{"updatedTime":1745747081000,"contributors":[{"name":"Lang","username":"Lang","email":"914551901@qq.com","commits":3,"avatar":"https://avatars.githubusercontent.com/Lang?v=4","url":"https://github.com/Lang"}]},"filePathRelative":"notes/学习笔记/八股文/算法.md","headers":[]}');export{c as comp,m as data};
