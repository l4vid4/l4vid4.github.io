import{_ as a,c as r,a as d,o as s}from"./app-dsZ4C4U9.js";const e={};function n(l,t){return s(),r("div",null,t[0]||(t[0]=[d('<p>面试官您好，我叫郎瑞峰，是河北工业大学人工智能专业的硕士研究生，研究方向是智慧教育与工业创新。自2023年入学以来，我一直在负责主导开发一款“DeepEdu智慧教育评价系统”，基于国家十大育人体系和三全育人政策，构建了完整的微服务架构，目前已在多所高校上线并持续迭代更新。在项目中，我担任项目负责人及后端开发工程师，负责系统架构设计、需求分析、数据库设计与运维支持。基于此回收的数据，我还利用大模型+SpringAI开发了一个专家系统，名为辅导员助手，可以为辅导员提供一键分析学生成绩、学生信息等功能。在学校我还担任学院内的党支部书记，负责党务相关的事宜。本科的时候我还担任学校大型门户网站的站长，负责带领团队开发和维护学校部分网站。实习经历的话呢，我在本科毕业后有过一段专利代理工程师的实习经历，负责对接客户需求及编写专利申请文件。我的自我介绍完毕，请您点评。</p><h2 id="腾讯相关" tabindex="-1"><a class="header-anchor" href="#腾讯相关"><span>腾讯相关</span></a></h2><h3 id="腾讯的企业文化" tabindex="-1"><a class="header-anchor" href="#腾讯的企业文化"><span>腾讯的企业文化</span></a></h3><ul><li>用户为本，科技向善</li></ul><h2 id="政策" tabindex="-1"><a class="header-anchor" href="#政策"><span>政策</span></a></h2><h3 id="什么是-安全左移" tabindex="-1"><a class="header-anchor" href="#什么是-安全左移"><span>什么是“安全左移”？</span></a></h3><p>“安全左移”是指在开发早期阶段（而非上线后）就引入安全控制手段，从源头减少安全问题。 常见做法：</p><ul><li>代码审计（SAST）工具集成到 CI/CD。</li><li>安全编码规范培训。</li><li>接口签名验证、权限设计从设计阶段就介入。</li><li>使用安全组件替代手写加解密逻辑。</li></ul><h3 id="信息安全和信息安全合规有什么区别" tabindex="-1"><a class="header-anchor" href="#信息安全和信息安全合规有什么区别"><span>信息安全和信息安全合规有什么区别</span></a></h3><ul><li><p><strong>信息安全</strong>偏技术，关注机密性、完整性、可用性（CIA）；</p></li><li><p><strong>信息安全合规</strong>偏管理，确保企业安全行为符合相关<strong>法律、标准、政策和合同</strong>要求，如网络安全法、等级保护、ISO27001 等。</p></li></ul><h2 id="项目" tabindex="-1"><a class="header-anchor" href="#项目"><span>项目</span></a></h2><h3 id="在微服务架构中-如何保障服务间调用的安全性-你们系统是怎么设计的" tabindex="-1"><a class="header-anchor" href="#在微服务架构中-如何保障服务间调用的安全性-你们系统是怎么设计的"><span>在微服务架构中，如何保障服务间调用的安全性？你们系统是怎么设计的？</span></a></h3><ul><li>使用内部网关进行统一接入；</li><li>服务间调用使用内部鉴权机制（如签名、token）；</li><li>使用 Nacos 限制配置访问权限；</li><li>服务注册与调用仅限内网白名单；</li><li>实现最小权限原则，禁止无关服务直接访问核心服务。</li></ul><h3 id="如何保障系统部署上线后的运行安全" tabindex="-1"><a class="header-anchor" href="#如何保障系统部署上线后的运行安全"><span>如何保障系统部署上线后的运行安全</span></a></h3><ul><li><p>生产环境与测试环境隔离；</p></li><li><p>配置文件不提交代码仓库，使用配置中心（Nacos）管理；</p></li><li><p>数据库账号权限最小化；</p></li><li><p>使用堡垒机或跳板机访问服务器；</p></li><li><p>日志监控 + 审计，Prometheus/ELK 收集异常信息；</p></li><li><p>定期打补丁，关闭不必要端口。</p></li></ul><h3 id="redis有哪些安全风险-你是如何处理的" tabindex="-1"><a class="header-anchor" href="#redis有哪些安全风险-你是如何处理的"><span>Redis有哪些安全风险？你是如何处理的？</span></a></h3><ul><li><p>禁止公网访问 Redis；</p></li><li><p>设置密码认证，开启 <code>requirepass</code>；</p></li><li><p>使用 <code>bind 127.0.0.1</code> 限制绑定；</p></li><li><p>不使用默认端口（6379）；</p></li><li><p>禁用危险命令如 <code>FLUSHALL</code>；</p></li><li><p>如果是缓存敏感数据，加密处理或设置过期时间。</p></li></ul><h3 id="基于机器码的离线授权机制" tabindex="-1"><a class="header-anchor" href="#基于机器码的离线授权机制"><span>基于机器码的离线授权机制</span></a></h3><ol><li><strong>客户部署系统后</strong>，系统会生成一个<strong>机器码（Machine Code）</strong></li></ol><ul><li>可由 CPU 序列号、主板 ID、MAC 地址等唯一信息组成</li><li>例如：<code>SHA256(CPU序列号 + 主板UUID + MAC)</code></li></ul><ol start="2"><li>客户将机器码发回你方，<strong>你方生成密钥（License）</strong></li></ol><ul><li>你方用私钥加密机器码 + 授权时间 + 客户信息，生成 license 文件（如 license.lic）</li></ul><ol start="3"><li>客户将该 license 文件导入系统，系统使用公钥解密验证</li></ol><ul><li>校验机器码是否一致、是否过期、是否被篡改</li></ul><h2 id="密码" tabindex="-1"><a class="header-anchor" href="#密码"><span>密码</span></a></h2><h3 id="加密和哈希的区别" tabindex="-1"><a class="header-anchor" href="#加密和哈希的区别"><span>加密和哈希的区别</span></a></h3><p>**加密（Encryption）**是可逆的，目的是数据保密，通过密钥加密和解密。</p><p>**哈希（Hash）**是不可逆的，主要用于数据完整性校验，如 MD5、SHA256。相同输入一定产生相同输出，不可从输出推回原始输入。</p><h3 id="非对称加密和对称加密的区别" tabindex="-1"><a class="header-anchor" href="#非对称加密和对称加密的区别"><span>非对称加密和对称加密的区别</span></a></h3><table><thead><tr><th>对比项</th><th>对称加密</th><th>非对称加密</th></tr></thead><tbody><tr><td><strong>密钥数量</strong></td><td>一个密钥（加密和解密相同）</td><td>两个密钥（公钥和私钥）</td></tr><tr><td><strong>加密速度</strong></td><td>快，效率高</td><td>慢，计算资源消耗大</td></tr><tr><td><strong>安全性</strong></td><td>密钥传输易泄露</td><td>公钥公开，私钥保密，更安全</td></tr><tr><td><strong>代表算法</strong></td><td>AES、DES、3DES、SM4</td><td>RSA、ECC、DSA、ElGamal、SM2</td></tr><tr><td><strong>使用场景</strong></td><td>数据加密、磁盘加密、HTTPS会话密钥</td><td>数字签名、密钥交换、SSL证书等</td></tr><tr><td><strong>典型问题</strong></td><td>密钥管理困难，尤其是多方通信时</td><td>加解密慢，不适合大数据加密传输</td></tr></tbody></table><h2 id="web" tabindex="-1"><a class="header-anchor" href="#web"><span>WEB</span></a></h2><h3 id="什么时xss-什么是csrf-两者有什么区别" tabindex="-1"><a class="header-anchor" href="#什么时xss-什么是csrf-两者有什么区别"><span>什么时XSS，什么是CSRF，两者有什么区别？</span></a></h3><blockquote><p>一句话概括：</p><ul><li>XSS：攻击者向网页注入恶意脚本，骗用户执行。</li><li>CSRF：攻击者诱导用户在登录状态下，伪造请求攻击服务器。</li></ul></blockquote><table><thead><tr><th>对比项</th><th>XSS（Cross-Site Scripting）</th><th>CSRF（Cross-Site Request Forgery）</th></tr></thead><tbody><tr><td><strong>攻击目标</strong></td><td><strong>用户浏览器</strong></td><td><strong>服务器端状态</strong></td></tr><tr><td><strong>攻击方式</strong></td><td>注入 JavaScript 代码</td><td>利用用户身份伪造请求</td></tr><tr><td><strong>用户是否需登录</strong></td><td>不一定</td><td>通常需登录</td></tr><tr><td><strong>利用点</strong></td><td>网页中未过滤的输入输出</td><td>用户未验证的请求接口</td></tr><tr><td><strong>危害</strong></td><td>窃取 Cookie、会话、控制页面</td><td>伪造转账、修改密码等敏感操作</td></tr><tr><td><strong>示例</strong></td><td>在评论框插入 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code></td><td>发给用户一个钓鱼页面，里面用 POST 自动转账</td></tr><tr><td><strong>防护措施</strong></td><td>输入过滤、输出转义、使用 CSP</td><td>使用 CSRF Token、SameSite Cookie、验证码</td></tr></tbody></table><h3 id="简述三次握手与tls-ssl握手流程" tabindex="-1"><a class="header-anchor" href="#简述三次握手与tls-ssl握手流程"><span>简述三次握手与TLS/SSL握手流程</span></a></h3><ul><li>TCP三次握手为SYN→SYN-ACK→ACK；</li><li>TLS包含证书交换、公钥协商、协商加密算法等机制；</li></ul><h4 id="https握手流程-非对称加密→对称加密" tabindex="-1"><a class="header-anchor" href="#https握手流程-非对称加密→对称加密"><span>HTTPS握手流程（非对称加密→对称加密）</span></a></h4><ul><li><p>客户端发送 Client Hello，协商 TLS 版本、随机数、支持加密算法等。</p></li><li><p>服务器返回 Server Hello，包含证书、公钥、随机数等。</p></li><li><p>客户端验证证书合法性，生成对称密钥并用公钥加密发送给服务器。</p></li><li><p>双方完成加密参数协商，切换为加密通信。</p></li><li><p>后续数据使用对称加密加速传输。</p></li></ul><h3 id="sql注入原理-解决方法-解决方法原理" tabindex="-1"><a class="header-anchor" href="#sql注入原理-解决方法-解决方法原理"><span>SQL注入原理？解决方法？解决方法原理？</span></a></h3><blockquote><p>攻击者将恶意 SQL 语句嵌入用户输入，通过拼接到后端 SQL 语句中执行，从而达到绕过登录验证、窃取数据或获取服务器权限的功能。</p></blockquote><h4 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法"><span>解决方法</span></a></h4><p><strong>参数化查询（预编译）</strong></p><ul><li>将SQL和数据严格分离</li><li>数据部分不会被当作SQL语法解析</li><li>无论传入什么字符，都只当作”值“处理</li></ul><p><strong>ORM框架</strong></p><ul><li>ORM通过映射对象与表，内部自动实现参数绑定</li><li>避免手动拼接SQL</li></ul><p><strong>输入验证与过滤</strong></p><ul><li>限制输入内容，例如不允许 <code>--</code>, <code>&#39;</code>, <code>;</code> 等特殊字符</li></ul><p><strong>最小权限原则</strong></p><ul><li>数据库账户只授权其必需操作</li></ul><p><strong>WAF</strong></p><ul><li>拦截典型SQL注入payload</li></ul><h3 id="什么是ssrf漏洞-如何防御" tabindex="-1"><a class="header-anchor" href="#什么是ssrf漏洞-如何防御"><span>什么是SSRF漏洞，如何防御</span></a></h3><blockquote><p><strong>SSRF（Server-Side Request Forgery，服务器端请求伪造）<strong>是一种由攻击者构造请求，诱使</strong>服务器端</strong>代表其发起请求的安全漏洞。</p><p>检测：利用可控参数构造访问内部资源的 URL，监听自己的服务器 DNS 或 HTTP 请求，观察是否被目标服务器访问。</p></blockquote><h4 id="防御措施" tabindex="-1"><a class="header-anchor" href="#防御措施"><span>防御措施</span></a></h4><ol><li>严格验证URL参数</li><li>禁止访问内网地址</li><li>DNS重绑定防护：防止利用DNS指向本地或内网地址</li><li>网络层隔离：后端服务部署在不能访问核心内网资源的DMZ区</li></ol><h2 id="网络安全" tabindex="-1"><a class="header-anchor" href="#网络安全"><span>网络安全</span></a></h2><h3 id="ids-vs-ips-有什么区别" tabindex="-1"><a class="header-anchor" href="#ids-vs-ips-有什么区别"><span>IDS vs IPS，有什么区别</span></a></h3><ul><li>IDS被动监控、发告警</li><li>IPS在侦测到攻击后能主动阻断通信</li></ul><h3 id="常见网络攻击及防御措施" tabindex="-1"><a class="header-anchor" href="#常见网络攻击及防御措施"><span>常见网络攻击及防御措施</span></a></h3><ul><li>MITM：中间人攻击，如WiFi仿冒、DNS劫持，防御措施包括TLS、证书校验、HTTPS</li><li>DoS/DDos：通过流量洪泛阻断服务，防御机制有WAF、流控设备等</li><li>IP spoofing：伪造IP，需结合ACL、防火墙策略。</li></ul><h3 id="实战中你是如何做权限提升的" tabindex="-1"><a class="header-anchor" href="#实战中你是如何做权限提升的"><span>实战中你是如何做权限提升的</span></a></h3><p><strong>本地提权</strong>：</p><ul><li>利用 SUID 程序、crontab、计划任务配置错误</li><li>查找内核漏洞（如 Dirty COW）</li></ul><p><strong>Web 提权</strong>：</p><ul><li>文件上传 + Webshell</li><li>数据库提权（如 xp_cmdshell）</li></ul><p><strong>横向移动</strong>：</p><ul><li>利用弱口令、共享凭证、token 复用</li></ul><h2 id="大模型和安全结合应用方向" tabindex="-1"><a class="header-anchor" href="#大模型和安全结合应用方向"><span>大模型和安全结合应用方向</span></a></h2><h3 id="威胁检测与响应" tabindex="-1"><a class="header-anchor" href="#威胁检测与响应"><span>威胁检测与响应</span></a></h3><table><thead><tr><th>应用方向</th><th>结合方式</th></tr></thead><tbody><tr><td><strong>恶意代码检测</strong></td><td>用大模型理解代码语义，识别变种病毒、恶意脚本（如AI+静态分析）</td></tr><tr><td><strong>APT攻击检测</strong></td><td>LLM对日志、网络流量进行上下文建模，发现复杂攻击路径</td></tr><tr><td><strong>SOC助手</strong></td><td>LLM辅助分析日志、溯源，输出安全事件摘要，提升分析效率</td></tr><tr><td><strong>入侵检测/响应（EDR/XDR）</strong></td><td>大模型理解终端/网络行为序列，更早发现异常</td></tr></tbody></table><h3 id="智能规则生成与漏洞分析" tabindex="-1"><a class="header-anchor" href="#智能规则生成与漏洞分析"><span>智能规则生成与漏洞分析</span></a></h3><table><thead><tr><th>应用方向</th><th>示例</th></tr></thead><tbody><tr><td><strong>WAF规则生成</strong></td><td>LLM自动根据攻击样本生成拦截规则</td></tr><tr><td><strong>漏洞挖掘</strong></td><td>分析源代码或二进制，发现SQL注入、XSS等漏洞（如CodeBERT、GPT-sec）</td></tr><tr><td><strong>补丁生成</strong></td><td>大模型辅助生成修复代码或建议</td></tr></tbody></table><h3 id="安全文档与合规分析" tabindex="-1"><a class="header-anchor" href="#安全文档与合规分析"><span>安全文档与合规分析</span></a></h3><table><thead><tr><th>应用方向</th><th>示例</th></tr></thead><tbody><tr><td><strong>安全报告生成</strong></td><td>输入检测日志、事件信息，由大模型输出格式化的报告</td></tr><tr><td><strong>合规审计</strong></td><td>分析策略/配置是否符合如ISO 27001、GDPR标准</td></tr><tr><td><strong>安全培训内容生成</strong></td><td>自动生成案例、考试题、模拟攻击脚本等材料</td></tr></tbody></table><h3 id="ai辅助渗透测试" tabindex="-1"><a class="header-anchor" href="#ai辅助渗透测试"><span>AI辅助渗透测试</span></a></h3><table><thead><tr><th>应用方向</th><th>示例</th></tr></thead><tbody><tr><td><strong>Payload生成</strong></td><td>LLM辅助构造变种 XSS、SQLi、RCE Payload（如auto-pentest工具）</td></tr><tr><td><strong>社工邮件生成</strong></td><td>生成高仿真钓鱼邮件，测试防御系统</td></tr><tr><td><strong>靶场对抗训练</strong></td><td>构建“红队LLM vs 蓝队LLM”场景，提升攻防能力</td></tr></tbody></table><h3 id="安全助手" tabindex="-1"><a class="header-anchor" href="#安全助手"><span>安全助手</span></a></h3><table><thead><tr><th>应用方向</th><th>示例</th></tr></thead><tbody><tr><td><strong>安全助手 Copilot</strong></td><td>在 IDE、SIEM、SOAR 中接入 LLM，回答“这个告警严重吗？”、“如何封堵该攻击？”</td></tr><tr><td><strong>自然语言查询日志</strong></td><td>类似 Splunk + GPT，用户直接用自然语言检索威胁事件</td></tr><tr><td><strong>安全知识问答</strong></td><td>构建私有知识库 + RAG，实现定制安全知识问答机器人</td></tr></tbody></table><h3 id="devsecops融合" tabindex="-1"><a class="header-anchor" href="#devsecops融合"><span>DevSecOps融合</span></a></h3><table><thead><tr><th>应用方向</th><th>示例</th></tr></thead><tbody><tr><td><strong>代码扫描解释</strong></td><td>LLM解释 SAST 扫描报告中的漏洞意义及修复建议</td></tr><tr><td><strong>CI/CD安全建议</strong></td><td>智能审查流水线配置，如 Dockerfile、K8s YAML 安全性</td></tr><tr><td><strong>依赖风险分析</strong></td><td>LLM分析依赖组件引入的漏洞影响</td></tr></tbody></table><h3 id="数据与隐私保护" tabindex="-1"><a class="header-anchor" href="#数据与隐私保护"><span>数据与隐私保护</span></a></h3><table><thead><tr><th>应用方向</th><th>示例</th></tr></thead><tbody><tr><td><strong>Prompt注入检测</strong></td><td>LLM生成、检测是否存在Prompt Injection风险（如越权、信息泄露）</td></tr><tr><td><strong>输出敏感信息过滤</strong></td><td>使用模型识别并屏蔽大模型生成中的敏感数据</td></tr><tr><td><strong>对抗样本检测</strong></td><td>针对大模型的对抗攻击进行保护</td></tr></tbody></table><h3 id="已有的llm安全技术" tabindex="-1"><a class="header-anchor" href="#已有的llm安全技术"><span>已有的LLM安全技术</span></a></h3><ul><li><strong>LLM防火墙</strong>：<strong>LLM Guard</strong>（Protect AI开源 + 商业版）：可拦截 prompt 注入、脱抑制、敏感数据泄露，可部署在任何 LLM 框架。</li><li><strong>Mindgard</strong>：模拟 prompt 注入、数据投毒、模型逆向等攻击，并支持 CI/CD 集成</li></ul>',84)]))}const i=a(e,[["render",n]]),h=JSON.parse('{"path":"/studyNotes/11spy8wn/","title":"面试题","lang":"zh-CN","frontmatter":{"title":"面试题","createTime":"2025/07/03 02:39:45","permalink":"/studyNotes/11spy8wn/"},"readingTime":{"minutes":9.45,"words":2834},"git":{"updatedTime":1751507580000,"contributors":[{"name":"Lang","username":"Lang","email":"914551901@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Lang?v=4","url":"https://github.com/Lang"}]},"filePathRelative":"notes/学习笔记/安全技术/面试题.md","headers":[]}');export{i as comp,h as data};
